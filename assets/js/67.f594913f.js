(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{510:function(s,a,n){"use strict";n.r(a);var t=n(8),i=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"排序-归并排序-merge-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序-归并排序-merge-sort"}},[s._v("#")]),s._v(" 排序 - 归并排序(Merge Sort)")]),s._v(" "),n("blockquote",[n("p",[s._v('将两个的有序数列合并成一个有序数列，我们称之为"归并"。归并排序(Merge Sort)就是利用归并思想对数列进行排序。')])]),s._v(" "),n("h2",{attrs:{id:"归并排序介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#归并排序介绍"}},[s._v("#")]),s._v(" 归并排序介绍")]),s._v(" "),n("p",[s._v('根据具体的实现，归并排序包括"从上往下"和"从下往上"2种方式。')]),s._v(" "),n("h3",{attrs:{id:"从下往上的归并排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从下往上的归并排序"}},[s._v("#")]),s._v(" 从下往上的归并排序")]),s._v(" "),n("p",[s._v("将待排序的数列分成若干个长度为1的子数列，然后将这些数列两两合并；得到若干个长度为2的有序数列，再将这些数列两两合并；得到若干个长度为4的有序数列，再将它们两两合并；直接合并成一个数列为止。这样就得到了我们想要的排序结果。(参考下面的图片)")]),s._v(" "),n("h3",{attrs:{id:"从上往下的归并排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从上往下的归并排序"}},[s._v("#")]),s._v(" 从上往下的归并排序")]),s._v(" "),n("p",[s._v('它与"从下往上"在排序上是反方向的。它基本包括3步:')]),s._v(" "),n("ul",[n("li",[n("code",[s._v("分解")]),s._v(" -- 将当前区间一分为二，即求分裂点 mid = (low + high)/2;")]),s._v(" "),n("li",[n("code",[s._v("求解")]),s._v(" -- 递归地对两个子区间a[low...mid] 和 a[mid+1...high]进行归并排序。递归的终结条件是子区间长度为1。")]),s._v(" "),n("li",[n("code",[s._v("合并")]),s._v(" -- 将已排序的两个子区间a[low...mid]和 a[mid+1...high]归并为一个有序的区间a[low...high]。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/alg-sort-merge-1.jpg",alt:"img"}})]),s._v(" "),n("h2",{attrs:{id:"归并排序实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#归并排序实现"}},[s._v("#")]),s._v(" 归并排序实现")]),s._v(" "),n("h3",{attrs:{id:"从上往下的归并排序-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从上往下的归并排序-2"}},[s._v("#")]),s._v(" 从上往下的归并排序")]),s._v(" "),n("p",[s._v("从上往下的归并排序采用了递归的方式实现。它的原理非常简单，如下图:")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/alg-sort-merge-2.jpg",alt:"img"}})]),s._v(" "),n("p",[s._v('通过"从上往下的归并排序"来对数组{80,30,60,40,20,10,50,70}进行排序时:')]),s._v(" "),n("ul",[n("li",[s._v("将数组{80,30,60,40,20,10,50,70}看作由两个有序的子数组{80,30,60,40}和{20,10,50,70}组成。对两个有序子树组进行排序即可。")]),s._v(" "),n("li",[s._v("将子数组{80,30,60,40}看作由两个有序的子数组{80,30}和{60,40}组成。\n"),n("ul",[n("li",[s._v("将子数组{20,10,50,70}看作由两个有序的子数组{20,10}和{50,70}组成。")])])]),s._v(" "),n("li",[s._v("将子数组{80,30}看作由两个有序的子数组{80}和{30}组成。\n"),n("ul",[n("li",[s._v("将子数组{60,40}看作由两个有序的子数组{60}和{40}组成。")]),s._v(" "),n("li",[s._v("将子数组{20,10}看作由两个有序的子数组{20}和{10}组成。")]),s._v(" "),n("li",[s._v("将子数组{50,70}看作由两个有序的子数组{50}和{70}组成。")])])])]),s._v(" "),n("h3",{attrs:{id:"从下往上的归并排序-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从下往上的归并排序-2"}},[s._v("#")]),s._v(" 从下往上的归并排序")]),s._v(" "),n("p",[s._v('从下往上的归并排序的思想正好与"从下往上的归并排序"相反。如下图:')]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/alg-sort-merge-3.jpg",alt:"img"}})]),s._v(" "),n("p",[s._v('通过"从下往上的归并排序"来对数组{80,30,60,40,20,10,50,70}进行排序时:')]),s._v(" "),n("ul",[n("li",[s._v("将数组{80,30,60,40,20,10,50,70}看作由8个有序的子数组{80},{30},{60},{40},{20},{10},{50}和{70}组成。")]),s._v(" "),n("li",[s._v("将这8个有序的子数列两两合并。得到4个有序的子树列{30,80},{40,60},{10,20}和{50,70}。")]),s._v(" "),n("li",[s._v("将这4个有序的子数列两两合并。得到2个有序的子树列{30,40,60,80}和{10,20,50,70}。")]),s._v(" "),n("li",[s._v("将这2个有序的子数列两两合并。得到1个有序的子树列{10,20,30,40,50,60,70,80}。")])]),s._v(" "),n("h2",{attrs:{id:"归并排序的时间复杂度和稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#归并排序的时间复杂度和稳定性"}},[s._v("#")]),s._v(" 归并排序的时间复杂度和稳定性")]),s._v(" "),n("h3",{attrs:{id:"归并排序时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#归并排序时间复杂度"}},[s._v("#")]),s._v(" 归并排序时间复杂度")]),s._v(" "),n("p",[s._v("归并排序的时间复杂度是O(N*lgN)。")]),s._v(" "),n("p",[s._v("假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢? 归并排序的形式就是一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据完全二叉树的可以得出它的时间复杂度是O(N*lgN)。")]),s._v(" "),n("h3",{attrs:{id:"归并排序稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#归并排序稳定性"}},[s._v("#")]),s._v(" 归并排序稳定性")]),s._v(" "),n("p",[s._v("归并排序是稳定的算法，它满足稳定算法的定义。")]),s._v(" "),n("p",[n("code",[s._v("算法稳定性")]),s._v(" -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！")]),s._v(" "),n("h2",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    /**\n     * 归并排序\n     * @param nums\n     * @param left\n     * @param right\n     */\n    public static void mergeSort(int[] nums,int left,int right){\n        //把数组一分为二\n        if(left < right){\n            int mid = (left + right)/2;\n            mergeSort(nums,left,mid);\n            mergeSort(nums,mid+1,right);\n            merge(nums,left,mid,right);\n        }\n    }\n    \n        /*\n     * 将一个数组中的两个相邻有序区间合并成一个\n     *\n     * 参数说明:\n     *     a -- 包含两个有序区间的数组\n     *     start -- 第1个有序区间的起始地址。\n     *     mid   -- 第1个有序区间的结束地址。也是第2个有序区间的起始地址。\n     *     end   -- 第2个有序区间的结束地址。\n     */\n    private static void merge(int[] nums, int left, int mid, int right) {\n        int[] tempArray=new int[right-left+1];//定义临时数组\n        int index=0;\n        int i=left,j=mid+1; // i:第1个有序区的索引   j:第2个有序区的索引\n        while (i <= mid && j <= right){\n            if(nums[i] <= nums[j]){\n                tempArray[index++]=nums[i++];//第一个区间的值小一点放进临时数组\n            }else{\n                tempArray[index++]=nums[j++];\n            }\n        }\n        while (i <= mid){//第一个区间还有数据，依次放进去即可\n            tempArray[index++]=nums[i++];\n        }\n        while (j <= right){//第一个区间还有数据，依次放进去即可\n            tempArray[index++]=nums[j++];\n        }\n\t\t// 将排序后的元素，全部都整合到数组a中。\n        for (i = 0; i < index; i++)\n            nums[left + i] = tempArray[i];\n        tempArray=null;\n    }\n    \n    public static void main(String[] args) {\n        int a[]=new int[]{2,7,3,4,3,34,8,0,2,6};\n        Sort.mergeSort(a,0,a.length-1);\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i]+" ");\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br")])])])}),[],!1,null,null,null);a.default=i.exports}}]);