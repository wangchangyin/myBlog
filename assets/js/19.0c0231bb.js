(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{462:function(t,e,n){"use strict";n.r(e);var a=n(8),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"java并发编程之美"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java并发编程之美"}},[t._v("#")]),t._v(" java并发编程之美")]),t._v(" "),n("h2",{attrs:{id:"一-并发编程基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-并发编程基础"}},[t._v("#")]),t._v(" 一.并发编程基础")]),t._v(" "),n("h3",{attrs:{id:"_1-1-什么是线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是线程"}},[t._v("#")]),t._v(" 1.1.什么是线程")]),t._v(" "),n("blockquote",[n("p",[t._v("线程是CPU执行的最小单位，线程与线程之间互不干扰")])]),t._v(" "),n("p",[t._v("一个进程中有多个线程，多个线程共享进程的堆和方法区资源，但是每个线程有自己的程序计数器和栈区域。")]),t._v(" "),n("p",[t._v("程序计数器，等下次轮到 己的时候再执行 那么如何知道之前程序执行到哪 了呢？另外需要注意的是，如果执行的是native方法，那么pc计数器记录的是undefined地址，只有执行的是Java代码时pc计数器记录的才是下一条指令的地址。")]),t._v(" "),n("p",[t._v("那么为什么pc计数器记录的是undefined地址：")]),t._v(" "),n("blockquote",[n("p",[t._v("native方法就由原生平台直接执行，并不需要理会抽象的JVM层面上的“pc寄存器”概念——原生的CPU上真正的PC寄存器是怎样就是怎样。就像一个用C或C++写的多线程程序，它在线程切换的时候是怎样的，Java的native方法也就是怎样的。")]),t._v(" "),n("p",[t._v("其实这里有个误区，程序计数器保存的是下一条指令的地址，所以程序计数器为空其实表示的是下一条指令是native方法（这时候还没真正执行native方法），调用执行native方法后，会在程序计数器中保存下一条指令地址，所以并不用担心java线程执行完native方法后不知道下一条指令是啥。")])]),t._v(" "),n("h3",{attrs:{id:"_1-2-线程的创建方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-线程的创建方式"}},[t._v("#")]),t._v(" 1.2.线程的创建方式")]),t._v(" "),n("ol",[n("li",[t._v("继承Thread类")]),t._v(" "),n("li",[t._v("实现Runbale接口")]),t._v(" "),n("li",[t._v("实现callable接口")]),t._v(" "),n("li",[t._v("通过线程池获取")])]),t._v(" "),n("blockquote",[n("p",[t._v("使用继承方式的好处是方便传参，你可以在子类里面添加成员变 ，通过 set 方法设置参数或者通过构造函数进行传递，而如果使用 Runnable 方式，则只能使用主线 程里面被声明为 final 变量。不好的地方是 Java 支持多继承，如果继承了 Thread 类， 那么子类不能再继承其他 ，而 Runable 则没有这个限制 。前两种方式都没办法拿到任务 的返回结果，但是 callable方式可以")])]),t._v(" "),n("h3",{attrs:{id:"_1-7-线程中断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-线程中断"}},[t._v("#")]),t._v(" 1.7.线程中断")]),t._v(" "),n("p",[t._v("Java 中的线程中断是 种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行 而是被中断的线程根据中断状态自行处理。")]),t._v(" "),n("ul",[n("li",[t._v("void interrupt()方法:中断线程，例如，当线程A运行时，线程B可以调用线程A的 interrupt()方法来设置线程A的中断标志为true并立即返回。设置标志仅仅是设置标志，线程A实际并没有被中断，它会继续往下执行。如果线程A因为调用了wait系列函数、join方法或者sleep方法而被阻塞挂起，这时候若线程B调用线程A的interrupt()方法，线程A会在调用这些方法的地方抛出InterruptedException异常而返回。")]),t._v(" "),n("li",[t._v("boolean isInterrupted()方法:检测当前线程是否被中断，如果是返回true，否则返回false。")]),t._v(" "),n("li",[t._v("boolean interrupted()方法:检测当前线程是否被中断，如果是返回true，否则返回false。与isInterrupted不同的是，该方法如果发现当前线程被中断，则会清除中断标志，并且该方法是static方法，可以通过Thread类直接调用。另外从下面的代码可以知道，在 interrupted()内部是获取当前调用线程的中断标志而不是调用interrupted()方法的实例对象的中断标志。")])]),t._v(" "),n("blockquote",[n("p",[t._v("isInterrupted()、interrupted（）的区别：")]),t._v(" "),n("p",[t._v("isInterrupted()：谁调用了它则判断谁知否被中断")]),t._v(" "),n("p",[t._v("interrupted（）：判断当前线程是否被中断")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('        public static void main(String[] args) throws InterruptedExceptio口｛\n        Thread threadOne = new Thread (new Runnable () {\n            public void run() {\n                for( ; ; ) {  } \n            }\n        }\n\t\t\t\t／／ 启动线程\n                threadOne .start() ; \n\t\t\t\t／／ 标志\n                threadOne . interrupt () ; \n\t\t\t\t／／获取中断\n                System.out.println("sinterrupted :" + threadOne.isinterrupted()) ; \n\t\t\t\t／／ 标志并重置\n               \tSystem.out.println("is Interrupted : ” + threadOne.interrupted()) ; \n\t\t\t\t／／获取 断标 并重直\n                System.out.println("is I nterrupted : ” + Thread.interrupted( ) ) ; \n\t\t\t\t／／获取中断标志\n                System.out.println(" errupted" ＋ threadOne.isinterrupted () ) ;\n                threadOne. join () ;\n               System.out.println("  main thread  is over”);\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("blockquote",[n("p",[t._v("结果：")]),t._v(" "),n("p",[t._v("true：判断调用的线程是否中断")]),t._v(" "),n("p",[t._v("false：判断当前线程是否中断")]),t._v(" "),n("p",[t._v("false：判断当前线程是否中断")]),t._v(" "),n("p",[t._v("true：判断调用的线程是否中断")])])])}),[],!1,null,null,null);e.default=r.exports}}]);