(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{513:function(s,n,a){"use strict";a.r(n);var e=a(8),r=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"springboot集成kafka全面实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot集成kafka全面实战"}},[s._v("#")]),s._v(" SpringBoot集成kafka全面实战")]),s._v(" "),a("p",[s._v("参考："),a("a",{attrs:{href:"https://blog.csdn.net/yuanlong122716/article/details/105160545/",target:"_blank",rel:"noopener noreferrer"}},[s._v("地址"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("本文是SpringBoot+Kafka的实战讲解，如果对kafka的架构原理还不了解的读者，建议先看一下"),a("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzU1NDA0MDQ3MA==&mid=2247483958&idx=1&sn=dffaad318b50f875eea615bc3bdcc80c&chksm=fbe8efcfcc9f66d9ff096fbae1c2a3671f60ca4dc3e7412ebb511252e7193a46dcd4eb11aadc&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[s._v("《大白话kafka架构原理》"),a("OutboundLink")],1),s._v("、"),a("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzU1NDA0MDQ3MA==&mid=2247483965&idx=1&sn=20dd02c4bf3a11ff177906f0527a5053&chksm=fbe8efc4cc9f66d258c239fefe73125111a351d3a4e857fd8cd3c98a5de2c18ad33aacdad947&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[s._v("《秒懂kafka HA（高可用）》"),a("OutboundLink")],1),s._v("两篇文章。")]),s._v(" "),a("h2",{attrs:{id:"一-前戏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-前戏"}},[s._v("#")]),s._v(" 一.前戏")]),s._v(" "),a("p",[s._v("1、在项目中连接kafka，因为是外网，首先要开放kafka配置文件中的如下配置（其中IP为公网IP），")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("advertised.listeners=PLAINTEXT://112.126.74.249:9092\n也可以配置\nlisteners=PLAINTEXT://112.126.74.249:9092\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("2.在开始前我们先创建两个topic：topic1、topic2，其分区和副本数都设置为2，用来测试，")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[root@iZ2zegzlkedbo3e64vkbefZ ~]#  cd /usr/local/kafka-cluster/kafka1/bin/\n[root@iZ2zegzlkedbo3e64vkbefZ bin]# ./kafka-topics.sh --create --zookeeper 172.17.80.219:2181 --replication-factor 2 --partitions 2 --topic topic1\nCreated topic topic1.\n[root@iZ2zegzlkedbo3e64vkbefZ bin]# ./kafka-topics.sh --create --zookeeper 172.17.80.219:2181 --replication-factor 2 --partitions 2 --topic topic2\nCreated topic topic2.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v('当然我们也可以不手动创建topic，在执行代码kafkaTemplate.send("topic1", normalMessage)发送消息时，kafka会帮我们自动完成topic的创建工作，但这种情况下创建的topic默认**只有一个分区，分区也没有副本。**所以，我们可以在项目中新建一个配置类专门用来初始化topic，如下:')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Configuration\npublic class KafkaInitialConfiguration {\n    // 创建一个名为testtopic的Topic并设置分区数为8，分区副本数为2\n    @Bean\n    public NewTopic initialTopic() {\n        return new NewTopic("testtopic",8, (short) 2 );\n    }\n    \n     // 如果要修改分区数，只需修改配置值重启项目即可\n    // 修改分区数并不会导致数据的丢失，但是分区数只能增大不能减小 更新有问题，请去命令行操作\n    @Bean\n    public NewTopic updateTopic() {\n        return new NewTopic("testtopic",10, (short) 2 );\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("3.新建Springboot项目")]),s._v(" "),a("ol",[a("li",[s._v("引入pom依赖")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("application.propertise配置（本文用到的配置项这里全列了出来）")]),s._v(" "),a("p",[s._v("application.properties：文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("###########【Kafka集群】###########\nspring.kafka.bootstrap-servers=112.126.74.249:9092,112.126.74.249:9093\n###########【初始化生产者配置】###########\n# 重试次数\nspring.kafka.producer.retries=0\n# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)\nspring.kafka.producer.acks=1\n# 批量大小\nspring.kafka.producer.batch-size=16384\n# 提交延时\nspring.kafka.producer.properties.linger.ms=0\n# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka\n# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了\n\n# 生产端缓冲区大小\nspring.kafka.producer.buffer-memory = 33554432\n# Kafka提供的序列化和反序列化类\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\n# 自定义分区器\n# spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner\n\n###########【初始化消费者配置】###########\n# 默认的消费组ID\nspring.kafka.consumer.properties.group.id=defaultConsumerGroup\n# 是否自动提交offset\nspring.kafka.consumer.enable-auto-commit=true\n# 提交offset延时(接收到消息后多久提交offset)\nspring.kafka.consumer.auto.commit.interval.ms=1000\n# 当kafka中没有初始offset或offset超出范围时将自动重置offset\n# earliest:重置为分区中最小的offset;\n# latest:重置为分区中最新的offset(消费分区中新产生的数据);\n# none:只要有一个分区不存在已提交的offset,就抛出异常;\nspring.kafka.consumer.auto-offset-reset=latest\n# 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)\nspring.kafka.consumer.properties.session.timeout.ms=120000\n# 消费请求超时时间\nspring.kafka.consumer.properties.request.timeout.ms=180000\n# Kafka提供的序列化和反序列化类\nspring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer\n# 消费端监听的topic不存在时，项目启动会报错(关掉)\nspring.kafka.listener.missing-topics-fatal=false\n# 设置批量消费\n# spring.kafka.listener.type=batch\n# 批量消费每次最多消费多少条消息\n# spring.kafka.consumer.max-poll-records=50\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br")])]),a("p",[s._v("yml文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("spring:\n  application:\n    name: SpringBoot_kafka\n  #【Kafka集群】\n  kafka:\n    bootstrap-servers: 192.168.188.128:9092,192.168.188.128:9093\n    # [kafka生产者配置]\n    producer:\n      retries: 0  #重试次数\n      acks: 1 #应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)\n      batch-size: 16384 #生产者批量发送大小\n      #提交延时 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka\n      ## linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了\n      properties:\n        linger:\n          ms: 0\n        #自定义分区器\n#        partitioner:\n#          class: com.felix.kafka.producer.CustomizePartitioner\n      # 生产端缓冲区大小\n      buffer-memory: 33554432\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\n\n    # [kafka消费者配置]\n    consumer:\n      properties:\n        #默认的消费组ID\n        group:\n          id: defaultConsumerGroup\n        session:\n          timeout:\n            ms: 120000 # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)\n        request:\n          timeout:\n            ms: 180000 # 消费请求超时时间\n      enable-auto-commit: true #是否自动提交offset\n      auto-commit-interval: 1000 #提交offset延时(接收到消息后多久提交offset)\n      # 当kafka中没有初始offset或offset超出范围时将自动重置offset\n      # earliest:重置为分区中最小的offset;\n      # latest:重置为分区中最新的offset(消费分区中新产生的数据);\n      # none:只要有一个分区不存在已提交的offset,就抛出异常;\n      auto-offset-reset: latest\n      #序列化\n      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer\n      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer\n#      max-poll-records: 50 # 批量消费每次最多消费多少条消息\n    listener:\n      missing-topics-fatal: false  # 消费端监听的topic不存在时，项目启动会报错(关掉)\n#      type: batch  # 设置批量消费  配合max-poll-records使用\n\nserver:\n  port: 80\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"二-简单生产者消费者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-简单生产者消费者"}},[s._v("#")]),s._v(" 二.简单生产者消费者")]),s._v(" "),a("h3",{attrs:{id:"_1-简单生产者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单生产者"}},[s._v("#")]),s._v(" 1.简单生产者")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.wcy.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class KafkaController {\n    @Autowired\n    public KafkaTemplate<String,Object> kafkaTemplate;\n\n    @GetMapping("kafka/normal/{message}")\n    public void sendMessage1(@PathVariable("message") String normalMessage){\n        kafkaTemplate.send("topic1",normalMessage);\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"_2-简单消费者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-简单消费者"}},[s._v("#")]),s._v(" 2.简单消费者")]),s._v(" "),a("p",[s._v("监听器用@KafkaListener注解，topics表示监听的topic，支持同时监听多个，用英文逗号分隔")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.wcy.consumer;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class KafkaConsumer {\n    //订阅主题topic1\n    @KafkaListener(topics = {"topic1"})\n    public void onMessage1(ConsumerRecord<?, ?> record){\n        // 消费的哪个topic、partition的消息,打印出消息内容\n        System.out.println("简单消费："+record.topic()+"-"+record.partition()+"-"+record.value());\n    }\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"三-生产者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-生产者"}},[s._v("#")]),s._v(" 三.生产者")]),s._v(" "),a("h3",{attrs:{id:"_1-带回调的生产者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-带回调的生产者"}},[s._v("#")]),s._v(" 1.带回调的生产者")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 带回调的发送消息\n     * @param message\n     */\n    @GetMapping("kafka/callbackOne/{message}")\n    public void sendMessage2(@PathVariable("message") String message){\n        for (int i = 0; i < 100; i++) {\n            kafkaTemplate.send("topic1",message).addCallback(new ListenableFutureCallback<SendResult<String, Object>>() {\n                //发送失败\n                @Override\n                public void onFailure(Throwable throwable) {\n                    System.out.println(throwable.getMessage());\n                }\n                //发送成功\n                @Override\n                public void onSuccess(SendResult<String, Object> stringObjectSendResult) {\n                    RecordMetadata metadata = stringObjectSendResult.getRecordMetadata();\n                    long offset = metadata.offset();//发送成功后的偏移量\n                    ProducerRecord<String, Object> record = stringObjectSendResult.getProducerRecord();\n                    String topic = record.topic();//主题\n                    Integer partition = record.partition();//分区\n                    System.out.println("发送消息成功:" + topic + "-" + partition + "-" + offset);\n                }\n            });\n        }\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h3",{attrs:{id:"_2-自定义分区规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义分区规则"}},[s._v("#")]),s._v(" 2.自定义分区规则")]),s._v(" "),a("p",[s._v("我们知道，kafka中每个topic被划分为多个分区，那么生产者将消息发送到topic时，具体追加到哪个分区呢？这就是所谓的分区策略，Kafka 为我们提供了默认的分区策略，同时它也支持自定义分区策略。其路由机制为：")]),s._v(" "),a("p",[s._v("① 若发送消息时指定了分区（即自定义分区策略），则直接将消息append到指定分区；")]),s._v(" "),a("p",[s._v("② 若发送消息时未指定 patition，但指定了 key（kafka允许为每条消息设置一个key），则对key值进行hash计算，根据计算结果路由到指定分区，这种情况下可以保证同一个 Key 的所有消息都进入到相同的分区；")]),s._v(" "),a("p",[s._v("③  patition 和 key 都未指定，则使用kafka默认的分区策略，轮询选出一个 patition；")]),s._v(" "),a("p",[s._v("※ 我们来自定义一个分区策略，将消息发送到我们指定的partition，首先新建一个分区器类实现Partitioner接口，重写方法，其中partition方法的返回值就表示将消息发送到几号分区：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("package com.wcy.partitioner;\n\nimport org.apache.kafka.clients.producer.Partitioner;\nimport org.apache.kafka.common.Cluster;\n\nimport java.util.Map;\n\n/**\n * 自定义分区\n */\npublic class CustomizePartitioner implements Partitioner {\n    @Override\n    public int partition(String s, Object o, byte[] bytes, Object o1, byte[] bytes1, Cluster cluster) {\n        // 自定义分区规则(这里假设全部发到0号分区)\n        // ......\n        return 0;\n    }\n\n    @Override\n    public void close() {\n\n    }\n\n    @Override\n    public void configure(Map<String, ?> map) {\n\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("生产者配置自定义分区的类路径")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#自定义分区器\nspring:\n\tkafka:        \n        producer:\n            properties:\n                partitioner:\n                  class: com.wcy.partitioner.CustomizePartitioner\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_3-生产者kafka事务提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-生产者kafka事务提交"}},[s._v("#")]),s._v(" 3.生产者kafka事务提交")]),s._v(" "),a("p",[s._v("注意：一旦使用事务提交后，那么所有的消息都需要事务提交")]),s._v(" "),a("blockquote",[a("p",[s._v("注意：一旦开启事务，那么后续的消息都必须放到事务中，否则会报错；")]),s._v(" "),a("p",[s._v("java.lang.IllegalStateException: No transaction is in process; possible solutions: run the template operation within the scope of a template.executeInTransaction() operation, start a transaction with @Transactional before invoking the template method, run in a transaction started by a listener container when consuming a record")])]),s._v(" "),a("h4",{attrs:{id:"_1-添加支持事务的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加支持事务的配置"}},[s._v("#")]),s._v(" 1.添加支持事务的配置")]),s._v(" "),a("ol",[a("li",[s._v("retries：必须大于0")]),s._v(" "),a("li",[s._v("acks：必须为-1或all")]),s._v(" "),a("li",[s._v("transaction-id-prefix：开启事务，开启事务会默认开启幂等性")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("spring:\n  application:\n    name: SpringBoot_kafka\n  #【Kafka集群】\n  kafka:\n    producer:\n      retries: 2  #重试次数\n      acks: -1 #应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)\n      #开启事务  retries>0  acks=-1 必须\n      transaction-id-prefix: tx-\n    consumer:\n      isolation-level: read_committed # 读取已提交的消息\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h4",{attrs:{id:"_2-使用kafkatemplate内置的事务操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用kafkatemplate内置的事务操作"}},[s._v("#")]),s._v(" 2.使用kafkaTemplate内置的事务操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    /**\n     * 带事务发送消息\n     */\n    @GetMapping("/kafka/transaction")\n    public void sendMessage3(){\n        // 声明事务：后面报错消息不会发出去\n        kafkaTemplate.executeInTransaction(operations -> {\n            for (int i = 0; i < 10; i++) {\n                operations.send("topic1","事务提交数据测试");\n                if(i ==4){\n                    int b=10/0;// 模拟产生异常代码\n                }\n            }\n            return true;// 返回true，表示发送成功\n        });\n\n        // 不声明事务：后面报错但前面消息已经发送成功了\n//        for (int i = 0; i < 10; i++) {\n//            kafkaTemplate.send("topic1","test executeInTransaction");\n//            if(i==4){\n//                int b=10/0;\n//            }\n//        }\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h2",{attrs:{id:"四-消费者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-消费者"}},[s._v("#")]),s._v(" 四.消费者")]),s._v(" "),a("h3",{attrs:{id:"_1-指定topic、partition、offset消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-指定topic、partition、offset消费"}},[s._v("#")]),s._v(" 1.指定topic、partition、offset消费")]),s._v(" "),a("p",[s._v("前面我们在监听消费topic1的时候，监听的是topic1上所有的消息，如果我们想指定topic、指定partition、指定offset来消费呢？也很简单，@KafkaListener注解已全部为我们提供")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/**\n * @Title 指定topic、partition、offset消费\n * @Description 同时监听topic1和topic2，监听topic1的0号分区、topic2的 "0号和1号" 分区，指向1号分区的offset初始值为8\n * @Author long.yuan\n * @Date 2020/3/22 13:38\n * @Param [record]\n * @return void\n **/\n@KafkaListener(id = "consumer1",groupId = "felix-group",topicPartitions = {\n        @TopicPartition(topic = "topic1", partitions = { "0" }),\n        @TopicPartition(topic = "topic2", partitions = "0", partitionOffsets = @PartitionOffset(partition = "1", initialOffset = "8"))\n})\npublic void onMessage2(ConsumerRecord<?, ?> record) {\n    System.out.println("topic:"+record.topic()+"|partition:"+record.partition()+"|offset:"+record.offset()+"|value:"+record.value());\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("属性解释：")]),s._v(" "),a("p",[s._v("① id：消费者ID；")]),s._v(" "),a("p",[s._v("② groupId：消费组ID；")]),s._v(" "),a("p",[s._v("③ topics：监听的topic，可监听多个；")]),s._v(" "),a("p",[s._v("④ topicPartitions：可配置更加详细的监听信息，可指定topic、parition、offset监听。")]),s._v(" "),a("p",[s._v("上面onMessage2监听的含义：监听topic1的0号分区，同时监听topic2的0号分区和topic2的1号分区里面offset从8开始的消息，"),a("strong",[s._v("每次重启都会从8开始，注意：会重复消费")])]),s._v(" "),a("p",[s._v("注意：topics和topicPartitions不能同时使用；")]),s._v(" "),a("h3",{attrs:{id:"_2-批量消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-批量消费"}},[s._v("#")]),s._v(" 2.批量消费")]),s._v(" "),a("blockquote",[a("p",[s._v("设置了批量消费，订阅了同一个主题都需要使用List<ConsumerRecord<?, ?>>来监听")])]),s._v(" "),a("p",[s._v("1.设置application.prpertise开启批量消费即可")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 设置批量消费\nspring.kafka.listener.type=batch\n# 批量消费每次最多消费多少条消息\nspring.kafka.consumer.max-poll-records=50\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("2.接收消息时用List来接收，监听代码如下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@KafkaListener(id = "consumer2",groupId = "felix-group", topics = "topic1")\npublic void onMessage3(List<ConsumerRecord<?, ?>> records) {\n    System.out.println(">>>批量消费一次，records.size()="+records.size());\n    for (ConsumerRecord<?, ?> record : records) {\n        System.out.println(record.value());\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_3-consumerawarelistenererrorhandler-异常处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-consumerawarelistenererrorhandler-异常处理器"}},[s._v("#")]),s._v(" 3.ConsumerAwareListenerErrorHandler 异常处理器")]),s._v(" "),a("p",[s._v("通过异常处理器，我们可以处理consumer在消费时发生的异常。")]),s._v(" "),a("p",[s._v("新建一个 ConsumerAwareListenerErrorHandler 类型的异常处理方法，用@Bean注入，BeanName默认就是方法名，然后我们将这个异常处理器的BeanName放到@KafkaListener注解的errorHandler属性里面，当监听抛出异常的时候，则会自动调用异常处理器")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 新建一个异常处理器，用@Bean注入\n@Bean\npublic ConsumerAwareListenerErrorHandler consumerAwareErrorHandler() {\n    return (message, exception, consumer) -> {\n        System.out.println("消费异常："+message.getPayload());\n        return null;\n    };\n}\n​\n// 将这个异常处理器的BeanName放到@KafkaListener注解的errorHandler属性里面\n@KafkaListener(topics = {"topic1"},errorHandler = "consumerAwareErrorHandler")\npublic void onMessage4(ConsumerRecord<?, ?> record) throws Exception {\n    throw new Exception("简单消费-模拟异常");\n}\n​\n// 批量消费也一样，异常处理器的message.getPayload()也可以拿到各条消息的信息\n@KafkaListener(topics = "topic1",errorHandler="consumerAwareErrorHandler")\npublic void onMessage5(List<ConsumerRecord<?, ?>> records) throws Exception {\n    System.out.println("批量消费一次...");\n    throw new Exception("批量消费-模拟异常");\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h3",{attrs:{id:"_4-消息过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-消息过滤器"}},[s._v("#")]),s._v(" 4.消息过滤器")]),s._v(" "),a("p",[s._v("消息过滤器可以在消息抵达consumer之前被拦截，在实际应用中，我们可以根据自己的业务逻辑，筛选出需要的信息再交由KafkaListener处理，不需要的消息则过滤掉。")]),s._v(" "),a("p",[s._v("配置消息过滤只需要为 监听器工厂 配置一个RecordFilterStrategy（消息过滤策略），返回true的时候消息将会被抛弃，返回false时，消息能正常抵达监听容器。")]),s._v(" "),a("h4",{attrs:{id:"_1-创建消费过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建消费过滤器"}},[s._v("#")]),s._v(" 1.创建消费过滤器")]),s._v(" "),a("blockquote",[a("p",[s._v("只允许消息是偶数的通过")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("package com.wcy.config;\n\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.core.ConsumerFactory;\n\n/**\n * 项目启动创建主题 可以指定分区大小、副本大小\n */\n@Configuration\npublic class KafkaInitialConfiguration {\n    @Autowired\n    ConsumerFactory consumerFactory;\n\n    // 消息过滤器\n    @Bean\n    public ConcurrentKafkaListenerContainerFactory filterContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory factory = new ConcurrentKafkaListenerContainerFactory();\n        factory.setConsumerFactory(consumerFactory);\n        // 被过滤的消息将被丢弃\n        factory.setAckDiscarded(true);\n        // 消息过滤策略\n        factory.setRecordFilterStrategy(consumerRecord -> {\n            if (Integer.parseInt(consumerRecord.value().toString()) % 2 == 0) {\n                return false;\n            }\n            //返回true消息则被过滤\n            return true;\n        });\n        return factory;\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h4",{attrs:{id:"_2-设置消费者过滤监听器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置消费者过滤监听器"}},[s._v("#")]),s._v(" 2.设置消费者过滤监听器")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    // 消息过滤监听\n    @KafkaListener(topics = {"topic1"},containerFactory = "filterContainerFactory")\n    public void onMessage6(ConsumerRecord<?, ?> record) {\n        System.out.println(record.value());\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_5-消息转发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-消息转发"}},[s._v("#")]),s._v(" 5.消息转发")]),s._v(" "),a("p",[s._v("在实际开发中，我们可能有这样的需求，应用A从TopicA获取到消息，经过处理后转发到TopicB，再由应用B监听处理消息，即一个应用处理完成后将该消息转发至其他应用，完成消息的转发。")]),s._v(" "),a("p",[s._v("在SpringBoot集成Kafka实现消息的转发也很简单，只需要通过一个@SendTo注解，被注解方法的return值即转发的消息内容，如下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/**\n * @Title 消息转发\n * @Description 从topic1接收到的消息经过处理后转发到topic2\n * @Author long.yuan\n * @Date 2020/3/23 22:15\n * @Param [record]\n * @return void\n **/\n@KafkaListener(topics = {"topic1"})\n@SendTo("topic2")\npublic String onMessage7(ConsumerRecord<?, ?> record) {\n    return record.value()+"-forward message";\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h3",{attrs:{id:"_6-定时启动、停止监听器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-定时启动、停止监听器"}},[s._v("#")]),s._v(" 6.定时启动、停止监听器")]),s._v(" "),a("p",[s._v("默认情况下，当消费者项目启动的时候，监听器就开始工作，监听消费发送到指定topic的消息，那如果我们不想让监听器立即工作，想让它在我们指定的时间点开始工作，或者在我们指定的时间点停止工作，该怎么处理呢——使用KafkaListenerEndpointRegistry，下面我们就来实现：")]),s._v(" "),a("p",[s._v("① 禁止监听器自启动；")]),s._v(" "),a("p",[s._v("② 创建两个定时任务，一个用来在指定时间点启动定时器，另一个在指定时间点停止定时器；")]),s._v(" "),a("p",[s._v("新建一个定时任务类，用注解@EnableScheduling声明，KafkaListenerEndpointRegistry 在SpringIO中已经被注册为Bean，直接注入，设置禁止KafkaListener自启动")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.wcy.consumer;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.config.KafkaListenerEndpointRegistry;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\n@EnableScheduling\n@Component\npublic class CronTimer {\n\n    /**\n     * @KafkaListener注解所标注的方法并不会在IOC容器中被注册为Bean，\n     * 而是会被注册在KafkaListenerEndpointRegistry中，\n     * 而KafkaListenerEndpointRegistry在SpringIOC中已经被注册为Bean\n     **/\n    @Autowired\n    private KafkaListenerEndpointRegistry registry;\n\n    @Autowired\n    private ConsumerFactory consumerFactory;\n\n    // 监听器容器工厂(设置禁止KafkaListener自启动)\n    @Bean\n    public ConcurrentKafkaListenerContainerFactory delayContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory container = new ConcurrentKafkaListenerContainerFactory();\n        container.setConsumerFactory(consumerFactory);\n        //禁止KafkaListener自启动\n        container.setAutoStartup(false);\n        return container;\n    }\n\n    // 监听器\n    @KafkaListener(id="timingConsumer",topics = "topic1",containerFactory = "delayContainerFactory")\n    public void onMessage1(ConsumerRecord<?, ?> record){\n        System.out.println("消费成功："+record.topic()+"-"+record.partition()+"-"+record.value());\n    }\n\n    // 定时启动监听器\n    @Scheduled(cron = "0 44 15 * * ? ")\n    public void startListener() {\n        System.out.println("启动监听器...");\n        // "timingConsumer"是@KafkaListener注解后面设置的监听器ID,标识这个监听器\n        if (!registry.getListenerContainer("timingConsumer").isRunning()) {\n            registry.getListenerContainer("timingConsumer").start();\n        }\n        //registry.getListenerContainer("timingConsumer").resume();\n    }\n\n    // 定时停止监听器\n    @Scheduled(cron = "0 45 15 * * ? ")\n    public void shutDownListener() {\n        System.out.println("关闭监听器...");\n        registry.getListenerContainer("timingConsumer").pause();\n    }\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);