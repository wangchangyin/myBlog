(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{505:function(s,t,a){"use strict";a.r(t);var n=a(8),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"排序-插入排序-insertion-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序-插入排序-insertion-sort"}},[s._v("#")]),s._v(" 排序 - 插入排序(Insertion Sort)")]),s._v(" "),a("h2",{attrs:{id:"插入排序介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序介绍"}},[s._v("#")]),s._v(" 插入排序介绍")]),s._v(" "),a("p",[s._v("直接插入排序(Straight Insertion Sort)的基本思想是: 把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。")]),s._v(" "),a("h2",{attrs:{id:"插入排序实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序实现"}},[s._v("#")]),s._v(" 插入排序实现")]),s._v(" "),a("p",[s._v("下面选取直接插入排序的一个中间过程对其进行说明。假设{20,30,40,10,60,50}中的前3个数已经排列过，是有序的了；接下来对10进行排列。示意图如下:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/alg-sort-insert-1.jpg",alt:"img"}})]),s._v(" "),a("p",[s._v("图中将数列分为有序区和无序区。我们需要做的工作只有两个: (1)取出无序区中的第1个数，并找出它在有序区对应的位置。(2)将无序区的数据插入到有序区；若有必要的话，则对有序区中的相关数据进行移位。")]),s._v(" "),a("h2",{attrs:{id:"插入排序的时间复杂度和稳定性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序的时间复杂度和稳定性"}},[s._v("#")]),s._v(" 插入排序的时间复杂度和稳定性")]),s._v(" "),a("h3",{attrs:{id:"插入排序时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序时间复杂度"}},[s._v("#")]),s._v(" 插入排序时间复杂度")]),s._v(" "),a("p",[s._v("直接插入排序的时间复杂度是O(N2)。")]),s._v(" "),a("p",[s._v("假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢? N-1！因此，直接插入排序的时间复杂度是O(N2)。")]),s._v(" "),a("h3",{attrs:{id:"插入排序稳定性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序稳定性"}},[s._v("#")]),s._v(" 插入排序稳定性")]),s._v(" "),a("p",[s._v("直接插入排序是稳定的算法，它满足稳定算法的定义。")]),s._v(" "),a("p",[a("code",[s._v("算法稳定性")]),s._v(" -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！")]),s._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Solution {\n    public int[] sortArray(int[] nums) {\n        //默认第一个数有序\n        for (int i = 1; i < nums.length; i++) {\n            int temp=nums[i];\n            //找出temp在有序数组中的位置\n            int j;\n            for (j=i-1;j>=0;j--){\n                if(nums[j] > temp){\n                    nums[j+1]=nums[j];//后移\n                    continue;//继续寻找\n                }\n                break;//没有找到比temp大的数\n            }\n            nums[j+1]=temp;//temp放到对应的位置\n        }\n        return nums;\n   }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),a("ul",[a("li",[s._v("https://www.pdai.tech/md/algorithm/alg-sort-x-insert.html")])])])}),[],!1,null,null,null);t.default=r.exports}}]);