(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{496:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sql调优简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql调优简介"}},[t._v("#")]),t._v(" SQL调优简介")]),t._v(" "),a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("实际项目开发过程中会遇到很多的性能问题。针对这些问题，不外乎以下几种解决途径：")]),t._v(" "),a("p",[t._v("1.服务层：硬件扩容，负载均衡等方式，保证每个请求能及时得到响应；")]),t._v(" "),a("p",[t._v("2.代码层：项目前期开发过程中，可能会遗留下不好的代码，比如多层for循环嵌套，这些代码增加了代码的复杂度，当编译器执行到这些代码时，需要耗费很大的资源与时间。针对代码的优化，可以使用 "),a("strong",[t._v("sonarqube")]),t._v(" ，这个软件能帮你检测出代码中隐藏的问题，包括但不限于空指针风险，代码复杂度过高等一系列问题；")]),t._v(" "),a("p",[t._v("3.数据层：数据层优化又可以分为多个方向；")]),t._v(" "),a("p",[t._v("​\t使用缓存：缓存是个很好的技术架构，他允许用户在启动项目时把一些数据加载到缓存中，当你要用到这些数据时，直接在缓存中查找，而不需要再次链接数据库执行sql查询语句。需要注意的是，缓存的数据一般要求是变动较小的数据，比如公司的组织架构，员工的信息等；")]),t._v(" "),a("p",[t._v("​\tSQL优化：这种方式可以视作java层的代码优化。同样的查询要求，可以有多种写法，那么如何去分辨哪一种写法更加合适呢？这是本文着重要讲的。")]),t._v(" "),a("h1",{attrs:{id:"索引原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引原则"}},[t._v("#")]),t._v(" 索引原则")]),t._v(" "),a("blockquote",[a("p",[t._v("1、索引应该经常建在Where 子句经常用到的列上。如果某个大表经常使用某个字段进行查询，并且检索行数小于总表行数的5%。则应该考虑。")]),t._v(" "),a("p",[t._v("2、对于两表连接的字段，应该建立索引。如果经常在某表的一个字段进行Order By 则也经过进行索引。")]),t._v(" "),a("p",[t._v("3、不应该在小表上建设索引。")])]),t._v(" "),a("p",[t._v("优缺点:\n　1、索引主要进行提高数据的查询速度。 当进行DML时，会更新索引。因此索引越多，则DML越慢，其需要维护索引。 因此在创建索引及DML需要权衡。")]),t._v(" "),a("p",[t._v("创建索引:\n　单一索引:Create Index "),a("Index-Name",[t._v(" On <Table_Name>(Column_Name);")])],1),t._v(" "),a("p",[t._v("复合索引: Create Index i_deptno_job on emp(deptno,job); —>在emp表的deptno、job列建立索引。")]),t._v(" "),a("p",[t._v("select * from emp where deptno=66 and job='sals' ->走索引。")]),t._v(" "),a("p",[t._v("select * from emp where deptno=66 OR job='sals' ->将进行全表扫描。不走索引")]),t._v(" "),a("p",[t._v("select * from emp where deptno=66 ->走索引。")]),t._v(" "),a("p",[t._v("select * from emp where job='sals' ->进行全表扫描、不走索引。")]),t._v(" "),a("p",[t._v("如果在where 子句中有OR 操作符或单独引用Job 列(索引列的后面列) 则将不会走索引，将会进行全表扫描。")]),t._v(" "),a("h1",{attrs:{id:"查询优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询优化"}},[t._v("#")]),t._v(" 查询优化")]),t._v(" "),a("p",[t._v("SQL优化的方式不外乎两种，一是建立索引，避免全表扫描，另一种就是优化编写的SQL语句")]),t._v(" "),a("p",[t._v("当Oracle数据库拿到SQL语句时，其会根据查询优化器分析该语句，并根据分析结果生成查询执行计划。\n也就是说，数据库是执行的查询计划，而不是Sql语句。\n查询优化器有rule-based-optimizer(基于规则的查询优化器) 和Cost-Based-optimizer(基于成本的查询优化器)。\n其中基于规则的查询优化器在10g版本中消失。\n对于规则查询，其最后查询的是全表扫描。而CBO则会根据统计信息进行最后的选择。")]),t._v(" "),a("p",[t._v("1、先执行From ->Where ->Group By->Order By")]),t._v(" "),a("p",[t._v("2、执行From 字句是从右往左进行执行。因此必须选择记录条数最少的表放在右边。这是为什么呢？")]),t._v(" "),a("p",[t._v("3、对于Where字句其执行顺序是从后向前执行、因此可以过滤最大数量记录的条件必须写在Where子句的末尾，而对于多表之间的连接，则写在之前。\n因为这样进行连接时，可以去掉大多不重复的项。")]),t._v(" "),a("p",[t._v("\\4. SELECT子句中避免使用("),a("em",[t._v(")ORACLE在解析的过程中, 会将’")]),t._v("’ 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间")]),t._v(" "),a("p",[t._v("5、索引失效的情况:\n　① Not Null/Null 如果某列建立索引,当进行Select * from emp where depto is not null/is null。 则会是索引失效。\n　② 索引列上不要使用函数,SELECT Col FROM tbl WHERE substr(name ,1 ,3 ) = 'ABC'\n或者SELECT Col FROM tbl WHERE name LIKE '%ABC%' 而SELECT Col FROM tbl WHERE name LIKE 'ABC%' 会使用索引。")]),t._v(" "),a("p",[t._v("③ 索引列上不能进行计算SELECT Col FROM tbl WHERE col / 10 > 10 则会使索引失效，应该改成\nSELECT Col FROM tbl WHERE col > 10 * 10")]),t._v(" "),a("p",[t._v("④ 索引列上不要使用NOT （ != 、 <> ）如:SELECT Col FROM tbl WHERE col ! = 10\n应该 改成：SELECT Col FROM tbl WHERE col > 10 OR col < 10 。")]),t._v(" "),a("p",[t._v("6、用UNION替换OR(适用于索引列)\n　 union:是将两个查询的结果集进行追加在一起，它不会引起列的变化。 由于是追加操作，需要两个结果集的列数应该是相关的，\n并且相应列的数据类型也应该相当的。union 返回两个结果集，同时将两个结果集重复的项进行消除。 如果不进行消除，用UNOIN ALL.")]),t._v(" "),a("p",[t._v("通常情况下, 用UNION替换WHERE子句中的OR将会起到较好的效果. 对索引列使用OR将造成全表扫描. 注意, 以上规则只针对多个索引列有效.\n如果有column没有被索引, 查询效率可能会因为你没有选择OR而降低. 在下面的例子中, LOC_ID 和REGION上都建有索引.")]),t._v(" "),a("p",[t._v("高效:\n　　SELECT LOC_ID , LOC_DESC , REGION\n　　FROM LOCATION\n　　WHERE LOC_ID = 10\n　　UNION\n　　SELECT LOC_ID , LOC_DESC , REGION\n　　FROM LOCATION\n　　WHERE REGION = “MELBOURNE”")]),t._v(" "),a("p",[t._v("低效:\n　　SELECT LOC_ID , LOC_DESC , REGION\n　　FROM LOCATION\n　　WHERE LOC_ID = 10 OR REGION = “MELBOURNE”\n　　如果你坚持要用OR, 那就需要返回记录最少的索引列写在最前面.")]),t._v(" "),a("p",[t._v("\\7. 用EXISTS替代IN、用NOT EXISTS替代NOT IN\n在许多基于基础表的查询中, 为了满足一个条件, 往往需要对另一个表进行联接. 在这种情况下, 使用EXISTS(或NOT EXISTS)通常将提高查询的效率.\n在子查询中, NOT IN子句将执行一个内部的排序和合并. 无论在哪种情况下, NOT IN都是最低效的(因为它对子查询中的表执行了一个全表遍历).\n为了避免使用NOT IN, 我们可以把它改写成外连接(Outer Joins)或NOT EXISTS.")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("p",[t._v("高效: SELECT * FROM EMP (基础表) WHERE EMPNO > 0 AND EXISTS (SELECT ‘X’ FROM DEPT WHERE DEPT.DEPTNO = EMP.DEPTNO AND LOC = ‘MELB’)")]),t._v(" "),a("p",[t._v("低效: SELECT * FROM EMP (基础表) WHERE EMPNO > 0 AND DEPTNO IN(SELECT DEPTNO FROM DEPT WHERE LOC = ‘MELB’)")]),t._v(" "),a("h2",{attrs:{id:"_1-索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-索引"}},[t._v("#")]),t._v(" 1.索引")]),t._v(" "),a("h3",{attrs:{id:"索引的建立"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的建立"}},[t._v("#")]),t._v(" 索引的建立")]),t._v(" "),a("p",[t._v("创建索引的方式很简单")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unique")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" index_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("column2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("上述的语句就是一个标准的索引创建语句，索引可以分为两种，普通索引和唯一索引。")]),t._v(" "),a("p",[t._v("普通索引唯一的作用就是加快查询速率，加索引的列值可为空，可重复；")]),t._v(" "),a("p",[t._v("唯一索引比普通索引多了个唯一值的限定，列值可为空，如果唯一索引是组合索引的话，要求组合值也唯一")]),t._v(" "),a("h3",{attrs:{id:"遇到的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遇到的问题"}},[t._v("#")]),t._v(" 遇到的问题")]),t._v(" "),a("h4",{attrs:{id:"问题一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题一"}},[t._v("#")]),t._v(" 问题一：")]),t._v(" "),a("p",[t._v("创建唯一索引的时候报错，起初以为是有一个重复的索引名字，换了几个名字都不行，最后发现是应该建立的符合索引存在重复的列；")]),t._v(" "),a("blockquote",[a("p",[t._v("解决："),a("strong",[t._v("删除表中重复的数据")])]),t._v(" "),a("p",[t._v("例 :表中有两个字段 id,year,创建唯一联合索引,出现上面的错误,可通过下面的语句删除重复的记录并在重复记录中只保留最小rowid的记录.")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("YEAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("YEAR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("YEAR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" ROWID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ROWID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("YEAR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("执行完上述语句后,再次执行创建唯一索引的语句就不会报错了.")])]),t._v(" "),a("p",[t._v("1.遇到问题过程：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wangchangyin/images@main/hand/image-20210716111700419.png",alt:"image-20210716111700419"}})]),t._v(" "),a("p",[t._v("2.最后发现合同信息-20826有重复的数据两条：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" region_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DOC_REGION_ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" CMF_BASE_DOC_REGIONS_WCY "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" region_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DOC_REGION_ID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716111932109.png",alt:"image-20210716111932109"}})]),t._v(" "),a("p",[t._v("3.删除重复的记录并在重复记录中只保留最小rowid的记录.")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DELETE FROM CMF_BASE_DOC_REGIONS_WCY A \nWHERE (A.region_name,A.DOC_REGION_ID) IN \n(SELECT region_name,DOC_REGION_ID FROM CMF_BASE_DOC_REGIONS_WCY GROUP BY region_name,DOC_REGION_ID HAVING COUNT(*) > 1) \nAND ROWID NOT IN (SELECT MIN(ROWID) FROM CMF_BASE_DOC_REGIONS_WCY GROUP BY region_name,DOC_REGION_ID HAVING COUNT(*)>1);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("4.创建索引(成功)")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("create unique index CMF_BASE_DOC_REGIONS_WCY_U2 on CMF_BASE_DOC_REGIONS_WCY(region_name,DOC_REGION_ID)\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h4",{attrs:{id:"问题二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题二"}},[t._v("#")]),t._v(" 问题二：")]),t._v(" "),a("blockquote",[a("p",[t._v("创建了(region_name,DOC_REGION_ID)的组合索引，但是region_name like '客户%'未走索引")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wangchangyin/images@main/hand/image-20210716112859317.png",alt:"image-20210716112859317"}})])]),t._v(" "),a("p",[a("strong",[t._v("解决：")])]),t._v(" "),a("blockquote",[a("p",[t._v("不要select *,由于花费了大量的时间去查找列，导致未走索引")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wangchangyin/images@main/hand/image-20210716112940809.png",alt:"image-20210716112940809"}})]),t._v(" "),a("h3",{attrs:{id:"索引的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的使用"}},[t._v("#")]),t._v(" 索引的使用")]),t._v(" "),a("p",[t._v("给大家看个例子")]),t._v(" "),a("p",[t._v("查询dept表，限制条件为department_name = '20'，这个查询很简单，但是在查看执行计划后，发现是全表扫描的，假设这张表的数据量很大，那么再执行这条sql锁花费的时间必然同步上升。具体表现会在cost和bytes列体现出来。")]),t._v(" "),a("p",[t._v("现在我们更改下查询条件，用department_id来查询。再次查看执行计划，这次不再是全表扫描了，而是走了索引。在dept表的department列添加了唯一索引约束，当在执行查询sql时，编译器会通过department_id这列的索引访问，大大降低的查询的消耗，提升了查询速率。")]),t._v(" "),a("p",[t._v("上述例子中可以看到，索引对于查询效率有着显著的提升。那么，是不是索引越多越好呢？索引什么时候建立呢？")]),t._v(" "),a("p",[t._v("对于第一个问题，索引是不是越多越好，我们先假设是，那应该把所有字段都建立起索引，对于ORACLE公司来说，那直接把表所有的字段变成索引不就行了，何必让用户在一个个的手动去建立呢？")]),t._v(" "),a("p",[t._v("实际情况与上述的假设恰恰相反，索引并不是越多越好。")]),t._v(" "),a("p",[t._v("每个索引的建立，都需要消耗数据库的资源，索引实际上也是一张表，记录了主键与索引字段，一般以索引文件的形式存储在磁盘上，并且当字段值更新时，索引也会同步更新，从而减低的更新速度。")]),t._v(" "),a("p",[a("strong",[t._v("索引的建立原则：")])]),t._v(" "),a("p",[t._v("1、装载数据后再建立索引")]),t._v(" "),a("p",[t._v("2、频繁搜索的列可以作为索引")]),t._v(" "),a("p",[t._v("3、在联接属性上建立索引")]),t._v(" "),a("p",[t._v("4、经常排序分组的列")]),t._v(" "),a("p",[t._v("5、删除不经常使用的索引")]),t._v(" "),a("p",[t._v("6、指定索引块的参数，如果将来会在表上执行大量的insert操作，建立索引时设定较大的ptcfree")]),t._v(" "),a("p",[t._v("7、指定索引所在的表空间，将表和索引放在不同的表空间上可以提高性能")]),t._v(" "),a("p",[t._v("8、对大型索引，考虑使用NOLOGGING子句创建大型索引")]),t._v(" "),a("p",[a("strong",[t._v("不要在下面的列创建索引：")])]),t._v(" "),a("p",[t._v("1、仅包含几个不同值得列")]),t._v(" "),a("p",[t._v("2、表中仅包含几条记录")]),t._v(" "),a("h2",{attrs:{id:"_2-索引失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引失效"}},[t._v("#")]),t._v(" 2.索引失效")]),t._v(" "),a("p",[t._v("在某些情况下，已经添加了索引，但是在实际执行过程中，并没有走索引，针对这种情况，主要总结了以下几种")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("<> ， !=")])]),t._v(" "),a("li",[a("p",[t._v("单独的>,<,(查询的数据量占总量超过10%)")])]),t._v(" "),a("li",[a("p",[t._v('like "%_" 百分号在前.')])]),t._v(" "),a("li",[a("p",[t._v("表没分析.")])]),t._v(" "),a("li",[a("p",[t._v("单独引用复合索引里非第一位置的索引列.")])]),t._v(" "),a("li",[a("p",[t._v("字符型字段为数字时在where条件里不添加引号（隐式类型转换）.")])]),t._v(" "),a("li",[a("p",[t._v("对索引列进行运算，索引列使用了函数.")])]),t._v(" "),a("li",[a("p",[t._v("not in ,not exist.")])]),t._v(" "),a("li",[a("p",[t._v("当变量采用的是times变量，而表的字段采用的是date变量时.或相反情况。")])]),t._v(" "),a("li",[a("p",[t._v("索引失效。")])]),t._v(" "),a("li",[a("p",[t._v("基于cost成本分析(oracle因为走全表成本会更小)：查询小表,或者返回值大概在10%以上")])]),t._v(" "),a("li",[a("p",[t._v("B-tree索引 is null不会走,is not null会走，位图索引 is null,is not null   都会走")])]),t._v(" "),a("li",[a("p",[t._v("联合索引 is not null 只要在建立的索引列（不分先后）都会走,\nis null时   必须要和建立索引第一列一起使用,当建立索引第一位置条件是is null 时,其他建立索引的列可以是is null（但必须在所有列都满足is null的时候）,或者=一个值；\n当建立索引的第一位置是=一个值时,其他索引列可以是任何情况（包括is null =一个值）,以上两种情况索引都会走。其他情况不会走")])])]),t._v(" "),a("h2",{attrs:{id:"_3-sql优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-sql优化"}},[t._v("#")]),t._v(" 3.SQL优化")]),t._v(" "),a("p",[t._v("除了添加索引，sql语句优化也能提高查询效率，那么如何去优化SQL呢？")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("表连接顺序：")])])]),t._v(" "),a("p",[t._v("ORACLE的解析器按照从右到左的顺序处理FROM子句中的表名，因此FROM子句中写在最后的表(基础表 driving table)将被最先处理")]),t._v(" "),a("p",[t._v("在FROM子句中包含多个表的情况下，选择记录条数最少的表作为基础表。当ORACLE处理多个表时，会运用排序及合并的方式连接它们。首先，扫描第一个表(FROM子句中最后的那个表)并对记录进行派序，然后扫描第二个表(FROM子句中最后第二个表)，最后将所有从第二个表中检索出的记录与第一个表中合适记录进行合并")]),t._v(" "),a("p",[t._v("如果有3个以上的表连接查询，那就需要选择交叉表作为基础表，交叉表是指那个被其他表所引用的表")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("WHERE子句中的连接顺序")])])]),t._v(" "),a("p",[t._v("ORACLE采用自下而上的顺序解析WHERE子句，根据这个原理,表之间的连接写在其他WHERE条件之前, 那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[t._v("SELECT子句中避免使用 ‘ * ‘")])]),t._v(" "),a("p",[t._v("当你想在SELECT子句中列出所有的列时，使用动态SQL列引用 * 是一个方便的方法。")]),t._v(" "),a("p",[t._v("实际上，ORACLE在解析的过程中，会将 * 依次转换成所有的列名, 这个工作是通过查询数据字典完成的， 这意味着将耗费更多的时间")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("用Where子句替换HAVING子句")])])])]),t._v(" "),a("p",[t._v("避免使用HAVING子句，HAVING 只会在检索出所有记录之后才对结果集进行过滤。 这个处理需要排序，总计等操作。 如果能通过WHERE子句限制记录的数目,那就能减少这方面的开销")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("strong",[t._v("使用表的别名")])])]),t._v(" "),a("p",[t._v("当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个Column上。这样一来,就可以减少解析的时间并减少那些由Column歧义引起的语法错误")]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[a("strong",[t._v("SQL语句用大写的")])]),t._v(" "),a("p",[t._v("因为Oracle总是先解析SQL语句，把小写的字母转换成大写的再执行")])]),t._v(" "),a("li",[a("p",[t._v("避免在索引列上使用NOT，通常，我们要避免在索引列上使用NOT, NOT会产生在和在索引列上使用函数相同的影响。当Oracle“遇到”NOT,他就会停止使用索引转而执行全表扫描")])]),t._v(" "),a("li",[a("p",[t._v("避免在索引列上使用计算与函数，WHERE子句中，如果索引列是函数的一部分。优化器将不使用索引而使用全表扫描")])]),t._v(" "),a("li",[a("p",[t._v("用>=替代>：")])])]),t._v(" "),a("p",[t._v("高效：SELECT * FROM EMP WHERE DEPTNO >=4 低效: SELECT * FROM EMP WHERE DEPTNO >3")]),t._v(" "),a("ol",{attrs:{start:"10"}},[a("li",[a("p",[t._v("用UNION替换OR ，IN来替换OR")])]),t._v(" "),a("li",[a("p",[t._v("避免在索引列上使用 IS NULL 和 IS NOT NULL")])]),t._v(" "),a("li",[a("p",[t._v("用UNION-ALL 替换UNION ( 如果有可能的话)；")])])]),t._v(" "),a("p",[t._v("当SQL语句需要UNION两个查询结果集合时，这两个结果集合会以UNION-ALL的方式被合并，然后在输出最终结果前进行排序。如果用UNION  ALL替代UNION，这样排序就不是必要了。效率就会因此得到提高。需要注意的是，UNION ALL  将重复输出两个结果集合中相同记录。")]),t._v(" "),a("ol",{attrs:{start:"13"}},[a("li",[t._v("减少与DB交互次数")]),t._v(" "),a("li",[t._v("多使用commit命令")])]),t._v(" "),a("h2",{attrs:{id:"_4-查看执行计划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-查看执行计划"}},[t._v("#")]),t._v(" 4.查看执行计划")])])}),[],!1,null,null,null);s.default=e.exports}}]);