(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{503:function(s,a,n){"use strict";n.r(a);var t=n(8),i=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"排序-冒泡排序-bubble-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序-冒泡排序-bubble-sort"}},[s._v("#")]),s._v(" 排序 - 冒泡排序(Bubble Sort)")]),s._v(" "),n("h2",{attrs:{id:"冒泡排序介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序介绍"}},[s._v("#")]),s._v(" 冒泡排序介绍")]),s._v(" "),n("p",[s._v("它是一种较简单的排序算法。它会遍历若干次要排序的数列，每次遍历时，它都会从前往后依次的比较相邻两个数的大小；如果前者比后者大，则交换它们的位置。这样，一次遍历之后，最大的元素就在数列的末尾！ 采用相同的方法再次遍历时，第二大的元素就被排列在最大元素之前。重复此操作，直到整个数列都有序为止！")]),s._v(" "),n("h2",{attrs:{id:"冒泡排序实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序实现"}},[s._v("#")]),s._v(" 冒泡排序实现")]),s._v(" "),n("p",[s._v("下面以数列{20,40,30,10,60,50}为例，演示它的冒泡排序过程(如下图)。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/alg-sort-bubble-1.jpg",alt:"img"}})]),s._v(" "),n("p",[s._v("我们先分析第1趟排序")]),s._v(" "),n("ul",[n("li",[s._v("当i=5,j=0时，a[0]<a[1]。此时，不做任何处理！")]),s._v(" "),n("li",[s._v("当i=5,j=1时，a[1]>a[2]。此时，交换a[1]和a[2]的值；交换之后，a[1]=30，a[2]=40。")]),s._v(" "),n("li",[s._v("当i=5,j=2时，a[2]>a[3]。此时，交换a[2]和a[3]的值；交换之后，a[2]=10，a[3]=40。")]),s._v(" "),n("li",[s._v("当i=5,j=3时，a[3]<a[4]。此时，不做任何处理！")]),s._v(" "),n("li",[s._v("当i=5,j=4时，a[4]>a[5]。此时，交换a[4]和a[5]的值；交换之后，a[4]=50，a[3]=60。")])]),s._v(" "),n("p",[s._v("于是，第1趟排序完之后，数列{20,40,30,10,60,50}变成了{20,30,10,40,50,60}。此时，数列末尾的值最大。")]),s._v(" "),n("p",[s._v("根据这种方法:")]),s._v(" "),n("ul",[n("li",[s._v("第2趟排序完之后，数列中a[5...6]是有序的。")]),s._v(" "),n("li",[s._v("第3趟排序完之后，数列中a[4...6]是有序的。")]),s._v(" "),n("li",[s._v("第4趟排序完之后，数列中a[3...6]是有序的。")]),s._v(" "),n("li",[s._v("第5趟排序完之后，数列中a[1...6]是有序的。整个数列也就是有序的了。")])]),s._v(" "),n("h2",{attrs:{id:"复杂度和稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复杂度和稳定性"}},[s._v("#")]),s._v(" 复杂度和稳定性")]),s._v(" "),n("h3",{attrs:{id:"冒泡排序时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序时间复杂度"}},[s._v("#")]),s._v(" 冒泡排序时间复杂度")]),s._v(" "),n("p",[s._v("冒泡排序的时间复杂度是O(N2)。 假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢? N-1次！因此，冒泡排序的时间复杂度是O(N2)。")]),s._v(" "),n("h3",{attrs:{id:"冒泡排序稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序稳定性"}},[s._v("#")]),s._v(" 冒泡排序稳定性")]),s._v(" "),n("p",[s._v("冒泡排序是稳定的算法，它满足稳定算法的定义。 算法稳定性 -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！")]),s._v(" "),n("h2",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 冒泡排序: Java\n *\n * @author skywang\n * @date 2014/03/11\n */\n\npublic class BubbleSort {\n\n    /*\n     * 冒泡排序\n     *\n     * 参数说明: \n     *     a -- 待排序的数组\n     *     n -- 数组的长度\n     */\n    public static void bubbleSort1(int[] a, int n) {\n        int i,j;\n\n        for (i=n-1; i>0; i--) {\n            // 将a[0...i]中最大的数据放在末尾\n            for (j=0; j<i; j++) {\n\n                if (a[j] > a[j+1]) {\n                    // 交换a[j]和a[j+1]\n                    int tmp = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = tmp;\n                }\n            }\n        }\n    }\n\n    /*\n     * 冒泡排序(改进版)\n     * 如果某次排序都没有进行交换顺序，那么这个数据已经有序，后续都不用排序了，直接结束循环\n     * 参数说明: \n     *     a -- 待排序的数组\n     *     n -- 数组的长度\n     */\n    public static void bubbleSort2(int[] a, int n) {\n        int i,j;\n        int flag;                 // 标记\n\n        for (i=n-1; i>0; i--) {\n\n            flag = 0;            // 初始化标记为0\n            // 将a[0...i]中最大的数据放在末尾\n            for (j=0; j<i; j++) {\n                if (a[j] > a[j+1]) {\n                    // 交换a[j]和a[j+1]\n                    int tmp = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = tmp;\n\n                    flag = 1;    // 若发生交换，则设标记为1\n                }\n            }\n\n            if (flag==0)\n                break;            // 若没发生交换，则说明数列已有序。\n        }\n    }\n\n    public static void main(String[] args) {\n        int i;\n        int[] a = {20,40,30,10,60,50};\n\n        System.out.printf("before sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n\n        bubbleSort1(a, a.length);\n        //bubbleSort2(a, a.length);\n\n        System.out.printf("after  sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n    }\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br")])]),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),n("ul",[n("li",[s._v("https://www.pdai.tech/md/algorithm/alg-sort-x-bubble.html")])])])}),[],!1,null,null,null);a.default=i.exports}}]);