(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{459:function(s,n,t){"use strict";t.r(n);var a=t(8),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://blog.csdn.net/mu_wind/article/details/109516995",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"_1-stream概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-stream概述"}},[s._v("#")]),s._v(" 1 Stream概述")]),s._v(" "),t("p",[s._v("Java 8 是一个非常成功的版本，这个版本新增的Stream，配合同版本出现的 Lambda ，给我们操作集合（Collection）提供了极大的便利。")]),s._v(" "),t("p",[s._v("那么什么是Stream？")]),s._v(" "),t("blockquote",[t("p",[s._v("Stream将要处理的元素集合看作一种流，在流的过程中，借助Stream API对流中的元素进行操作，比如：筛选、排序、聚合等。")])]),s._v(" "),t("p",[s._v("Stream可以由数组或集合创建，对流的操作分为两种：")]),s._v(" "),t("p",[s._v("中间操作，每次返回一个新的流，可以有多个。\n终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。\n另外，Stream有几个特性：")]),s._v(" "),t("ol",[t("li",[s._v("stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。")]),s._v(" "),t("li",[s._v("stream不会改变数据源，通常情况下会产生一个新的集合或一个值。")]),s._v(" "),t("li",[s._v("stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。")])]),s._v(" "),t("h2",{attrs:{id:"_2-stream的创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-stream的创建"}},[s._v("#")]),s._v(" 2.Stream的创建")]),s._v(" "),t("p",[s._v("1.通过 "),t("code",[s._v("java.util.Collection.stream()")]),s._v(" 方法用集合创建流**（推荐）**")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('List<String> list = Arrays.asList("a", "b", "c");\n// 创建一个顺序流\nStream<String> stream = list.stream();\n// 创建一个并行流\nStream<String> parallelStream = list.parallelStream();\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("2.使用"),t("code",[s._v("java.util.Arrays.stream(T[] array)")]),s._v("方法用数组创建流")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int[] array={1,3,5,6,8};\nIntStream stream = Arrays.stream(array);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("3.使用"),t("code",[s._v("Stream")]),s._v("的静态方法："),t("code",[s._v("of()、iterate()、generate()")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5, 6);\n\nStream<Integer> stream2 = Stream.iterate(0, (x) -> x + 3).limit(4);\nstream2.forEach(System.out::println);\n\nStream<Double> stream3 = Stream.generate(Math::random).limit(3);\nstream3.forEach(System.out::println);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"_3-stream操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-stream操作"}},[s._v("#")]),s._v(" 3.Stream操作")]),s._v(" "),t("p",[s._v("涉及的相关DTO：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("package com.wcy.demo.dto;\n\npublic class Person {\n    private String name;  // 姓名\n    private int salary; // 薪资\n    private int age; // 年龄\n    private String sex; //性别\n    private String area;  // 地区\n\n    // 构造方法\n    public Person(String name, int salary,String sex,String area) {\n        this.name = name;\n        this.salary = salary;\n        this.sex = sex;\n        this.area = area;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getSalary() {\n        return salary;\n    }\n\n    public void setSalary(int salary) {\n        this.salary = salary;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    public String getArea() {\n        return area;\n    }\n\n    public void setArea(String area) {\n        this.area = area;\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br")])]),t("h3",{attrs:{id:"_3-1-遍历-foreach-find-match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-遍历-foreach-find-match"}},[s._v("#")]),s._v(" 3.1.遍历（foreach/find/match）")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public static void main(String[] args) {\n        List<Person> personList = new ArrayList<Person>();\n        personList.add(new Person("Tom", 8900, "male", "New York"));\n        personList.add(new Person("Jack", 7000, "male", "Washington"));\n        personList.add(new Person("Lily", 7800, "female", "Washington"));\n        personList.add(new Person("Anni", 8200, "female", "New York"));\n        personList.add(new Person("Owen", 9500, "male", "New York"));\n        personList.add(new Person("Alisa", 7900, "female", "New York"));\n\n        //遍历\n        personList.stream().forEach(System.out::print);\n        personList.stream().forEach((x)->{\n            System.out.print(x);\n        });\n\n        //匹配第一个\n        personList.stream().findFirst().get();\n\n        //匹配任意\n        personList.stream().findAny().get();\n\n        //是否满足某些条件\n        personList.stream().allMatch(x->x.getAge()>45);\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("h3",{attrs:{id:"_3-2-筛选-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-筛选-filter"}},[s._v("#")]),s._v(" 3.2.筛选（filter）")]),s._v(" "),t("p",[t("strong",[s._v("筛选员工中工资高于8000的人，并形成新的集合。")]),s._v(" 形成新集合依赖"),t("code",[s._v("collect")]),s._v("（收集），后文有详细介绍。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    public static void main(String[] args) {\n        List<Person> personList = new ArrayList<Person>();\n        personList.add(new Person("Tom", 8900, "male", "New York"));\n        personList.add(new Person("Jack", 7000, "male", "Washington"));\n        personList.add(new Person("Lily", 7800, "female", "Washington"));\n        personList.add(new Person("Anni", 8200, "female", "New York"));\n        personList.add(new Person("Owen", 9500, "male", "New York"));\n        personList.add(new Person("Alisa", 7900, "female", "New York"));\n\n        //过滤\n        personList.stream().filter(x->x.getSalary()>8000).collect(Collectors.toList());\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"_3-3-聚合-max-min-count"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-聚合-max-min-count"}},[s._v("#")]),s._v(" 3.3.聚合（max/min/count)")]),s._v(" "),t("p",[t("strong",[s._v("获取员工工资最高的人。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class StreamTest {\n\tpublic static void main(String[] args) {\n\t\tList<Person> personList = new ArrayList<Person>();\n\t\tpersonList.add(new Person("Tom", 8900, 23, "male", "New York"));\n\t\tpersonList.add(new Person("Jack", 7000, 25, "male", "Washington"));\n\t\tpersonList.add(new Person("Lily", 7800, 21, "female", "Washington"));\n\t\tpersonList.add(new Person("Anni", 8200, 24, "female", "New York"));\n\t\tpersonList.add(new Person("Owen", 9500, 25, "male", "New York"));\n\t\tpersonList.add(new Person("Alisa", 7900, 26, "female", "New York"));\n\t\t\n\t\tOptional<Person> max = personList.stream().max(Comparator.comparingInt(Person::getSalary));\n\t\tSystem.out.println("员工工资最大值：" + max.get().getSalary());\n\t\t\n\t\tint count = personList.stream().count();\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h3",{attrs:{id:"_3-4-映射-map-flatmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-映射-map-flatmap"}},[s._v("#")]),s._v(" 3.4.映射(map/flatMap)")]),s._v(" "),t("p",[t("strong",[s._v("将员工的薪资全部增加1000。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    public static void main(String[] args) {\n        List<Person> personList = new ArrayList<Person>();\n        personList.add(new Person("Tom", 8900, "male", "New York"));\n        personList.add(new Person("Jack", 7000, "male", "Washington"));\n        personList.add(new Person("Lily", 7800, "female", "Washington"));\n        personList.add(new Person("Anni", 8200, "female", "New York"));\n        personList.add(new Person("Owen", 9500, "male", "New York"));\n        personList.add(new Person("Alisa", 7900, "female", "New York"));\n\n\t\t// 不改变原来员工集合的方式\n\t\tList<Person> personListNew = personList.stream().map(person -> {\n\t\t\tPerson personNew = new Person(person.getName(), 0, 0, null, null);\n\t\t\tpersonNew.setSalary(person.getSalary() + 10000);\n\t\t\treturn personNew;\n\t\t}).collect(Collectors.toList());\n\n        // 改变原来员工集合的方式\n        personList.stream().map((x) -> {\n            x.setSalary(x.getSalary()+1000);\n            return x;\n        }).forEach((x)->{\n            System.out.println(x.getSalary());\n        });\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("h3",{attrs:{id:"_3-5-归约-reduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-归约-reduce"}},[s._v("#")]),s._v(" 3.5.归约(reduce)")]),s._v(" "),t("p",[t("strong",[s._v("求所有员工的工资之和和最高工资。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//对BookAmount求和\nBigDecimal oneAmountAllTeam = mapList.stream().filter(a -> null != a.getBookAmount())\n        .map(CmfClmClaimNpcexpLine::getBookAmount).reduce(BigDecimal.ZERO, BigDecimal::add);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class StreamTest {\n\tpublic static void main(String[] args) {\n\t\tList<Person> personList = new ArrayList<Person>();\n\t\tpersonList.add(new Person("Tom", 8900, 23, "male", "New York"));\n\t\tpersonList.add(new Person("Jack", 7000, 25, "male", "Washington"));\n\t\tpersonList.add(new Person("Lily", 7800, 21, "female", "Washington"));\n\t\tpersonList.add(new Person("Anni", 8200, 24, "female", "New York"));\n\t\tpersonList.add(new Person("Owen", 9500, 25, "male", "New York"));\n\t\tpersonList.add(new Person("Alisa", 7900, 26, "female", "New York"));\n\n\t\t// 求工资之和方式1：\n\t\tOptional<Integer> sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);\n\t\t// 求工资之和方式2：\n\t\tInteger sumSalary2 = personList.stream().reduce(0, (sum, p) -> sum += p.getSalary(),\n\t\t\t\t(sum1, sum2) -> sum1 + sum2);\n\t\t// 求工资之和方式3：\n\t\tInteger sumSalary3 = personList.stream().reduce(0, (sum, p) -> sum += p.getSalary(), Integer::sum);\n\n\t\t// 求最高工资方式1：\n\t\tInteger maxSalary = personList.stream().reduce(0, (max, p) -> max > p.getSalary() ? max : p.getSalary(),\n\t\t\t\tInteger::max);\n\t\t// 求最高工资方式2：\n\t\tInteger maxSalary2 = personList.stream().reduce(0, (max, p) -> max > p.getSalary() ? max : p.getSalary(),\n\t\t\t\t(max1, max2) -> max1 > max2 ? max1 : max2);\n\n\t\tSystem.out.println("工资之和：" + sumSalary.get() + "," + sumSalary2 + "," + sumSalary3);\n\t\tSystem.out.println("最高工资：" + maxSalary + "," + maxSalary2);\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("h3",{attrs:{id:"_3-6-收集-collect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-收集-collect"}},[s._v("#")]),s._v(" 3.6.收集(collect)")]),s._v(" "),t("p",[t("code",[s._v("collect")]),s._v("，收集，可以说是内容最繁多、功能最丰富的部分了。从字面上去理解，就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合。")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("collect")]),s._v("主要依赖"),t("code",[s._v("java.util.stream.Collectors")]),s._v("类内置的静态方法。")])]),s._v(" "),t("h4",{attrs:{id:"_3-6-1-归集-tolist-toset-tomap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-1-归集-tolist-toset-tomap"}},[s._v("#")]),s._v(" 3.6.1 归集(toList/toSet/toMap)")]),s._v(" "),t("p",[s._v("因为流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里。"),t("code",[s._v("toList")]),s._v("、"),t("code",[s._v("toSet")]),s._v("和"),t("code",[s._v("toMap")]),s._v("比较常用，另外还有"),t("code",[s._v("toCollection")]),s._v("、"),t("code",[s._v("toConcurrentMap")]),s._v("等复杂一些的用法。")]),s._v(" "),t("p",[s._v("下面用一个案例演示"),t("code",[s._v("toList")]),s._v("、"),t("code",[s._v("toSet")]),s._v("和"),t("code",[s._v("toMap")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    public static void main(String[] args) {\n        List<Person> personList = new ArrayList<Person>();\n        personList.add(new Person("Tom", 8900, "male", "New York"));\n        personList.add(new Person("Jack", 7000, "male", "Washington"));\n        personList.add(new Person("Lily", 7800, "female", "Washington"));\n        personList.add(new Person("Anni", 8200, "female", "New York"));\n        personList.add(new Person("Owen", 9500, "male", "New York"));\n        personList.add(new Person("Alisa", 7900, "female", "New York"));\n\n        // 改变原来员工集合的方式\n        List<Person> collectList = personList.stream().collect(Collectors.toList());\n        Set<Person> collectSet = personList.stream().collect(Collectors.toSet());\n        Map<String, Person> collect = personList.stream().collect(Collectors.toMap((key) -> key.getName(), (value) -> value));\n        personList.stream().collect(Collectors.toMap(Person::getName,(value) -> value)));\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("tomap：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Map<Long, BigDecimal>  contractAmountMap = contractHeaders.stream()\n                .filter(o -> null != o.getContractHeaderId())\n                .collect(Collectors.toMap(CmfCmContractHeader::getContractHeaderId, CmfCmContractHeader::getSumAmount));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"_3-6-2-统计-count-averaging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-2-统计-count-averaging"}},[s._v("#")]),s._v(" 3.6.2.统计(count/averaging)")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class StreamTest {\n\tpublic static void main(String[] args) {\n\t\tList<Person> personList = new ArrayList<Person>();\n\t\tpersonList.add(new Person("Tom", 8900, 23, "male", "New York"));\n\t\tpersonList.add(new Person("Jack", 7000, 25, "male", "Washington"));\n\t\tpersonList.add(new Person("Lily", 7800, 21, "female", "Washington"));\n\n\t\t// 求总数\n\t\tLong count = personList.stream().collect(Collectors.counting());\n\t\t// 求平均工资\n\t\tDouble average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));\n\t\t// 求最高工资\n\t\tOptional<Integer> max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));\n\t\t// 求工资之和\n\t\tInteger sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));\n\t\t// 一次性统计所有信息\n\t\tDoubleSummaryStatistics collect = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));\n\n\t\tSystem.out.println("员工总数：" + count);\n\t\tSystem.out.println("员工平均工资：" + average);\n\t\tSystem.out.println("员工工资总和：" + sum);\n\t\tSystem.out.println("员工工资所有统计：" + collect);\n\t}\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("h4",{attrs:{id:"_3-6-3-分组-partitioningby-groupingby"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-3-分组-partitioningby-groupingby"}},[s._v("#")]),s._v(" 3.6.3 分组(partitioningBy/groupingBy)")]),s._v(" "),t("p",[s._v("根据合同ID分组")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Map<Long, List<CmfClmWriteOffTmpLine>> writeOffContractMap = writeOffTmpLineList.stream()\n                    .filter(clmWriteOffTmpLine -> clmWriteOffTmpLine.getContractId() != null)\n                    .collect(Collectors.groupingBy(CmfClmWriteOffTmpLine::getContractId));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class StreamTest {\n\tpublic static void main(String[] args) {\n\t\tList<Person> personList = new ArrayList<Person>();\n\t\tpersonList.add(new Person("Tom", 8900, "male", "New York"));\n\t\tpersonList.add(new Person("Jack", 7000, "male", "Washington"));\n\t\tpersonList.add(new Person("Lily", 7800, "female", "Washington"));\n\t\tpersonList.add(new Person("Anni", 8200, "female", "New York"));\n\t\tpersonList.add(new Person("Owen", 9500, "male", "New York"));\n\t\tpersonList.add(new Person("Alisa", 7900, "female", "New York"));\n\n\t\t// 将员工按薪资是否高于8000分组\n        Map<Boolean, List<Person>> part = personList.stream().collect(Collectors.partitioningBy(x -> x.getSalary() > 8000));\n        // 将员工按性别分组\n        Map<String, List<Person>> group = personList.stream().collect(Collectors.groupingBy(Person::getSex));\n        // 将员工先按性别分组，再按地区分组\n        Map<String, Map<String, List<Person>>> group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));\n        System.out.println("员工按薪资是否大于8000分组情况：" + part);\n        System.out.println("员工按性别分组情况：" + group);\n        System.out.println("员工按性别、地区：" + group2);\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("h4",{attrs:{id:"_3-6-4-接合-joining"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-4-接合-joining"}},[s._v("#")]),s._v(" 3.6.4 接合(joining)")]),s._v(" "),t("p",[t("code",[s._v("joining")]),s._v("可以将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class StreamTest {\n\tpublic static void main(String[] args) {\n\t\tList<Person> personList = new ArrayList<Person>();\n\t\tpersonList.add(new Person("Tom", 8900, 23, "male", "New York"));\n\t\tpersonList.add(new Person("Jack", 7000, 25, "male", "Washington"));\n\t\tpersonList.add(new Person("Lily", 7800, 21, "female", "Washington"));\n\n\t\tString names = personList.stream().map(p -> p.getName()).collect(Collectors.joining(","));\n\t\tSystem.out.println("所有员工的姓名：" + names);\n\t\tList<String> list = Arrays.asList("A", "B", "C");\n\t\tString string = list.stream().collect(Collectors.joining("-"));\n\t\tSystem.out.println("拼接后的字符串：" + string);\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("运行结果：")]),s._v(" "),t("blockquote",[t("p",[s._v("所有员工的姓名：Tom,Jack,Lily\n拼接后的字符串：A-B-C")])]),s._v(" "),t("h4",{attrs:{id:"_3-6-5-归约-reducing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-5-归约-reducing"}},[s._v("#")]),s._v(" 3.6.5 归约(reducing)")]),s._v(" "),t("p",[t("code",[s._v("Collectors")]),s._v("类提供的"),t("code",[s._v("reducing")]),s._v("方法，相比于"),t("code",[s._v("stream")]),s._v("本身的"),t("code",[s._v("reduce")]),s._v("方法，增加了对自定义归约的支持。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class StreamTest {\n\tpublic static void main(String[] args) {\n\t\tList<Person> personList = new ArrayList<Person>();\n\t\tpersonList.add(new Person("Tom", 8900, 23, "male", "New York"));\n\t\tpersonList.add(new Person("Jack", 7000, 25, "male", "Washington"));\n\t\tpersonList.add(new Person("Lily", 7800, 21, "female", "Washington"));\n\n\t\t// 每个员工减去起征点后的薪资之和（这个例子并不严谨，但一时没想到好的例子）\n\t\tInteger sum = personList.stream().collect(Collectors.reducing(0, Person::getSalary, (i, j) -> (i + j - 5000)));\n\t\tSystem.out.println("员工扣税薪资总和：" + sum);\n\n\t\t// stream的reduce\n\t\tOptional<Integer> sum2 = personList.stream().map(Person::getSalary).reduce(Integer::sum);\n\t\tSystem.out.println("员工薪资总和：" + sum2.get());\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h3",{attrs:{id:"_3-7-排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-排序"}},[s._v("#")]),s._v(" 3.7.排序")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class StreamTest {\n\tpublic static void main(String[] args) {\n\t\tList<Person> personList = new ArrayList<Person>();\n\n\t\tpersonList.add(new Person("Sherry", 9000, 24, "female", "New York"));\n\t\tpersonList.add(new Person("Tom", 8900, 22, "male", "Washington"));\n\t\tpersonList.add(new Person("Jack", 9000, 25, "male", "Washington"));\n\t\tpersonList.add(new Person("Lily", 8800, 26, "male", "New York"));\n\t\tpersonList.add(new Person("Alisa", 9000, 26, "female", "New York"));\n\n\t\t// 按工资升序排序（自然排序）\n\t\tList<String> newList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).map(Person::getName)\n\t\t\t\t.collect(Collectors.toList());\n\t\t// 按工资倒序排序\n\t\tList<String> newList2 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())\n\t\t\t\t.map(Person::getName).collect(Collectors.toList());\n\t\t// 先按工资再按年龄升序排序\n\t\tList<String> newList3 = personList.stream()\n\t\t\t\t.sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge)).map(Person::getName)\n\t\t\t\t.collect(Collectors.toList());\n\t\t// 先按工资再按年龄自定义排序（降序）\n\t\tList<String> newList4 = personList.stream().sorted((p1, p2) -> {\n\t\t\tif (p1.getSalary() == p2.getSalary()) {\n\t\t\t\treturn p2.getAge() - p1.getAge();\n\t\t\t} else {\n\t\t\t\treturn p2.getSalary() - p1.getSalary();\n\t\t\t}\n\t\t}).map(Person::getName).collect(Collectors.toList());\n\n\t\tSystem.out.println("按工资升序排序：" + newList);\n\t\tSystem.out.println("按工资降序排序：" + newList2);\n\t\tSystem.out.println("先按工资再按年龄升序排序：" + newList3);\n\t\tSystem.out.println("先按工资再按年龄自定义降序排序：" + newList4);\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("h3",{attrs:{id:"_3-8-提取-组合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-提取-组合"}},[s._v("#")]),s._v(" 3.8 提取/组合")]),s._v(" "),t("p",[s._v("流也可以进行合并、去重、限制、跳过等操作。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class StreamTest {\n\tpublic static void main(String[] args) {\n\t\tString[] arr1 = { "a", "b", "c", "d" };\n\t\tString[] arr2 = { "d", "e", "f", "g" };\n\n\t\tStream<String> stream1 = Stream.of(arr1);\n\t\tStream<String> stream2 = Stream.of(arr2);\n\t\t// concat:合并两个流 distinct：去重\n\t\tList<String> newList = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());\n\t\t// limit：限制从流中获得前n个数据\n\t\tList<Integer> collect = Stream.iterate(1, x -> x + 2).limit(10).collect(Collectors.toList());\n\t\t// skip：跳过前n个数据\n\t\tList<Integer> collect2 = Stream.iterate(1, x -> x + 2).skip(1).limit(5).collect(Collectors.toList());\n\n\t\tSystem.out.println("流合并：" + newList);\n\t\tSystem.out.println("limit：" + collect);\n\t\tSystem.out.println("skip：" + collect2);\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("运行结果：")]),s._v(" "),t("blockquote",[t("p",[s._v("流合并：[a, b, c, d, e, f, g]\nlimit：[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nskip：[3, 5, 7, 9, 11]")])])])}),[],!1,null,null,null);n.default=e.exports}}]);