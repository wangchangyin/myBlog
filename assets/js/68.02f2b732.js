(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{508:function(s,a,n){"use strict";n.r(a);var t=n(8),r=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"排序-桶排序-bucket-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序-桶排序-bucket-sort"}},[s._v("#")]),s._v(" 排序 - 桶排序(Bucket Sort)")]),s._v(" "),n("blockquote",[n("p",[s._v("桶排序(Bucket Sort)的原理很简单，将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。")])]),s._v(" "),n("h2",{attrs:{id:"桶排序介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桶排序介绍"}},[s._v("#")]),s._v(" 桶排序介绍")]),s._v(" "),n("p",[s._v('假设待排序的数组a中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组r，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个"桶"。')]),s._v(" "),n("p",[s._v('在排序时，逐个遍历数组a，将数组a的值，作为"桶数组r"的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组a[3]=5，则将r[5]的值+1。')]),s._v(" "),n("h2",{attrs:{id:"桶排序实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桶排序实现"}},[s._v("#")]),s._v(" 桶排序实现")]),s._v(" "),n("p",[s._v("假设a={8,2,3,4,3,6,6,3,9}, max=10。此时，将数组a的所有数据都放到需要为0-9的桶中。如下图:")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/alg-sort-bucket-1.jpg",alt:"img"}})]),s._v(" "),n("p",[s._v("在将数据放到桶中之后，再通过一定的算法，将桶中的数据提出出来并转换成有序数组。就得到我们想要的结果了。")]),s._v(" "),n("h2",{attrs:{id:"桶排序复杂度和稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桶排序复杂度和稳定性"}},[s._v("#")]),s._v(" 桶排序复杂度和稳定性")]),s._v(" "),n("h3",{attrs:{id:"桶排序复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桶排序复杂度"}},[s._v("#")]),s._v(" 桶排序复杂度")]),s._v(" "),n("ul",[n("li",[s._v("平均时间复杂度: O(n + k)")]),s._v(" "),n("li",[s._v("最佳时间复杂度: O(n + k)")]),s._v(" "),n("li",[s._v("最差时间复杂度: O(n ^ 2)")]),s._v(" "),n("li",[s._v("空间复杂度: O(n * k)")])]),s._v(" "),n("p",[s._v("桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。")]),s._v(" "),n("h3",{attrs:{id:"桶排序稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桶排序稳定性"}},[s._v("#")]),s._v(" 桶排序稳定性")]),s._v(" "),n("p",[s._v("稳定性: 稳定")]),s._v(" "),n("h2",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),n("ul",[n("li",[s._v("max：要比所有的数据都大")]),s._v(" "),n("li",[s._v("只能对大于0的数据排序")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    /**\n     * 桶排序\n     * 前提：都为正数、由于要开辟数据中最大值的数据，所以需要的空间很大\n     * @param nums\n     * @param max:所有数据中最大的值\n     */\n    public static void bucketSort(int[] nums,int max){\n        if (nums==null || max<1)\n            return ;\n        // 创建一个容量为max的数组buckets，并且将buckets中的所有数据都初始化为0。\n        int[] bucketArray=new int[max];\n        //放进桶\n        for (int i = 0; i < nums.length; i++) {\n            //数据值存放到bucketArray下标中，若有相同值则+1\n            bucketArray[nums[i]]++;\n        }\n        //排序\n        int j=0;\n        for (int i = 0; i < bucketArray.length; i++) {\n            while (bucketArray[i]-- > 0){\n                nums[j++]=i;//i是实际的值\n            }\n        }\n    }\n    \n    public static void main(String[] args) {\n        int a[]=new int[]{2,7,3,4,3,34,8,9,2,6};\n        Sort.bucketSort(a,35);\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i]+" ");\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);