(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{480:function(n,s,a){"use strict";a.r(s);var e=a(8),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"ribbon负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon负载均衡"}},[n._v("#")]),n._v(" Ribbon负载均衡")]),n._v(" "),a("h2",{attrs:{id:"_1-什么是负载均衡-load-balance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是负载均衡-load-balance"}},[n._v("#")]),n._v(" 1.什么是负载均衡(Load Balance)")]),n._v(" "),a("p",[n._v("简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。\n"),a("strong",[n._v("常见的负载均衡有软件Nginx，LVS，硬件 F5等。")])]),n._v(" "),a("p",[n._v("Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别：\nNginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。")]),n._v(" "),a("p",[n._v("Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。")]),n._v(" "),a("p",[a("strong",[n._v("简单的说：比如一个医院病人看病，通过Nginx转发到某个科室，比如口腔科、骨科等等，然后再通过本地负载均衡派发到某个医生。")])]),n._v(" "),a("h3",{attrs:{id:"_1-1-集中式lb和进程内lb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-集中式lb和进程内lb"}},[n._v("#")]),n._v(" 1.1.集中式LB和进程内LB")]),n._v(" "),a("p",[n._v("集中式LB：即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方；")]),n._v(" "),a("p",[n._v("进程内LB：将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。")]),n._v(" "),a("p",[n._v("Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。")]),n._v(" "),a("h2",{attrs:{id:"_2-什么是ribbon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是ribbon"}},[n._v("#")]),n._v(" 2.什么是Ribbon")]),n._v(" "),a("p",[n._v("Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。")]),n._v(" "),a("blockquote",[a("p",[n._v("简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。")])]),n._v(" "),a("h2",{attrs:{id:"_3-未来替换的产品"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-未来替换的产品"}},[n._v("#")]),n._v(" 3.未来替换的产品")]),n._v(" "),a("p",[n._v("由于Ribbon已经停止更新，SpringCloud社区正在逐步使用"),a("strong",[n._v("Spring Cloud loadbalacer")]),n._v("替换Ribbon，但是由于Ribbonn功能强大，暂时还未替换。")]),n._v(" "),a("h2",{attrs:{id:"_4-springcloud使用ribbon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-springcloud使用ribbon"}},[n._v("#")]),n._v(" 4.SpringCloud使用Ribbon")]),n._v(" "),a("h4",{attrs:{id:"_4-1-引入pom文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-引入pom文件"}},[n._v("#")]),n._v(" 4.1.引入Pom文件")]),n._v(" "),a("p",[n._v("由于引入了spring-cloud-starter-netflix-eureka-client，该组件已经帮我们引入了Ribbon，所以不需要引入多余的。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\x3c!--eureka-client--\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\neureka-client已经引入了Ribbon，不需要引入\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n</dependency>\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wangchangyin/images@main/hand/2021-06-16_104153.png",alt:"2021-06-16_104153"}})]),n._v(" "),a("h4",{attrs:{id:"_4-2-引入resttempelet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-引入resttempelet"}},[n._v("#")]),n._v(" 4.2.引入restTempelet")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package com.wcy.springcloud.config;\n\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestTemplate;\n\n/**\n * @auther zzyy\n * @create 2020-02-18 17:27\n */\n@Configuration\npublic class ApplicationContextConfig\n{\n    @Bean\n    @LoadBalanced//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力\n    public RestTemplate getRestTemplate()\n    {\n        return new RestTemplate();\n    }\n}\n//applicationContext.xml <bean id="" class="">\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])]),a("h4",{attrs:{id:"_4-3-controller使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-controller使用"}},[n._v("#")]),n._v(" 4.3.Controller使用")]),n._v(" "),a("p",[a("strong",[n._v("使用restTemplate的getForObject、getForEntity和postForObject、postForEntity方法")])]),n._v(" "),a("h5",{attrs:{id:"_4-3-1-getforobject、getforentity的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-getforobject、getforentity的区别"}},[n._v("#")]),n._v(" 4.3.1.getForObject、getForEntity的区别")]),n._v(" "),a("p",[n._v("getForObject：返回对象为响应体中数据转化成的对象，基本上可以理解为Json")]),n._v(" "),a("p",[n._v("getForEntity：返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    @GetMapping("/consumer/payment/{id:\\\\d*}")\n    //CommentResult<Payment> 前端消费者应该声明返回的类型\n    public CommentResult<Payment> create(@PathVariable("id") Long id){\n        return restTemplate.getForObject(PAMENT_URL+"/payment/"+id,CommentResult.class);\n    }\n\n    @GetMapping("/consumer/payment/Entity/{id:\\\\d*}")\n    //CommentResult<Payment> 前端消费者应该声明返回的类型\n    public CommentResult<Payment> create2(@PathVariable("id") Long id){\n        ResponseEntity<CommentResult> forEntity = restTemplate.getForEntity(PAMENT_URL + "/payment/" + id, CommentResult.class);\n        if(forEntity.getStatusCode().is2xxSuccessful()){\n            return forEntity.getBody();\n        }else{\n            return new CommentResult<>(400,"服务器错误");\n        }\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("h2",{attrs:{id:"_5-常见轮询算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-常见轮询算法"}},[n._v("#")]),n._v(" 5.常见轮询算法")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wangchangyin/images@main/hand/2021-06-16_105600.png",alt:"2021-06-16_105600"}})]),n._v(" "),a("p",[n._v("Ribbon实现负载均衡算法的类接口关系如上图：")]),n._v(" "),a("p",[a("strong",[n._v("常见的负载均衡算法：")])]),n._v(" "),a("ol",[a("li",[n._v("com.netflix.loadbalancer.RoundRobinRule：轮询**（默认）**")]),n._v(" "),a("li",[n._v("com.netflix.loadbalancer.RandomRule：随机")]),n._v(" "),a("li",[n._v("com.netflix.loadbalancer.RetryRule：先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务")]),n._v(" "),a("li",[n._v("WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择")]),n._v(" "),a("li",[n._v("BestAvailableRule：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务")]),n._v(" "),a("li",[n._v("AvailabilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例")]),n._v(" "),a("li",[n._v("ZoneAvoidanceRule：默认规则,复合判断server所在区域的性能和server的可用性选择服务器")])]),n._v(" "),a("h2",{attrs:{id:"_6-切换其他负载均衡算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-切换其他负载均衡算法"}},[n._v("#")]),n._v(" 6.切换其他负载均衡算法")]),n._v(" "),a("p",[n._v("修改cloud-consumer-order80客户端")]),n._v(" "),a("p",[n._v("切换为其他负载均衡算法，注意自定义的配置类不要被@ComponentScan扫描，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。")]),n._v(" "),a("p",[n._v("新建包名com.wcy.myrule")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wangchangyin/images@main/hand/2021-06-16_111926.png",alt:"2021-06-16_111926"}})]),n._v(" "),a("p",[n._v("新建MySelfRule规则类")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("package com.wcy.myrule;\n\nimport com.netflix.loadbalancer.IRule;\nimport com.netflix.loadbalancer.RandomRule;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @auther zzyy\n * @create 2020-02-02 14:31\n */\n@Configuration\npublic class MySelfRule\n{\n    @Bean\n    public IRule myRule()\n    {\n        return new RandomRule();//定义为随机\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br")])]),a("p",[n._v("主启动类添加@RibbonClient,"),a("strong",[n._v("注意name指的是后端多个服务的名字")]),n._v(",这样客户端80访问后端消费者服务就会走我们定义的负载均衡方法。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wangchangyin/images@main/hand/2021-06-16_201330.png",alt:"2021-06-16_201330"}})]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package com.wcy.springcloud;\n\nimport com.atguigu.myrule.MySelfRule;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.ribbon.RibbonClient;\n\n/**\n * @auther zzyy\n * @create 2020-01-28 16:18\n * 在启动该微服务的时候就能去加载我们的自定义Ribbon配置类，从而使配置生效，形如：\n */\n@SpringBootApplication\n@EnableEurekaClient\n@RibbonClient(name = "CLOUD-PAYMENT-SERVICE",configuration=MySelfRule.class)\npublic class OrderMain80\n{\n    public static void main(String[] args)\n    {\n        SpringApplication.run(OrderMain80.class,args);\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("h2",{attrs:{id:"_7-ribbon负载均衡使用原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-ribbon负载均衡使用原理"}},[n._v("#")]),n._v(" 7.Ribbon负载均衡使用原理")]),n._v(" "),a("p",[n._v("轮询的原理："),a("strong",[n._v("通过请求次数取余服务总数即可实现")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标  ，每次服务重启动后rest接口计数从1开始。\n \nList<ServiceInstance> instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");\n \n如：  List [0] instances = 127.0.0.1:8002\n　　　List [1] instances = 127.0.0.1:8001\n \n8001+ 8002 组合成为集群，它们共计2台机器，集群总数为2， 按照轮询算法原理：\n \n当总请求数为1时： 1 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001\n当总请求数位2时： 2 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002\n当总请求数位3时： 3 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001\n当总请求数位4时： 4 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002\n如此类推......\n\n若服务器重启，则重新从1开始\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("h2",{attrs:{id:"_8-ribbon实现负载均衡的源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-ribbon实现负载均衡的源码"}},[n._v("#")]),n._v(" 8.Ribbon实现负载均衡的源码")]),n._v(" "),a("p",[n._v("轮询算法的源码解析")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package com.netflix.loadbalancer;\n\nimport com.netflix.client.config.IClientConfig;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n*轮询的实现源码\n**/\npublic class RoundRobinRule extends AbstractLoadBalancerRule {\n    private AtomicInteger nextServerCyclicCounter; //核心，请求的次数，是个原子类\n    private static final boolean AVAILABLE_ONLY_SERVERS = true;\n    private static final boolean ALL_SERVERS = false;\n    private static Logger log = LoggerFactory.getLogger(RoundRobinRule.class);\n\n    public RoundRobinRule() {\n        this.nextServerCyclicCounter = new AtomicInteger(0);\n    }\n\n    public RoundRobinRule(ILoadBalancer lb) {\n        this();\n        this.setLoadBalancer(lb);\n    }\n\n    public Server choose(ILoadBalancer lb, Object key) {\n        if (lb == null) {\n            log.warn("no load balancer");\n            return null;\n        } else {\n            Server server = null;\n            int count = 0;\n\n            while(true) {\n                if (server == null && count++ < 10) {\n                    List<Server> reachableServers = lb.getReachableServers();//查询健康的总服务\n                    List<Server> allServers = lb.getAllServers();//获取所有的服务\n                    int upCount = reachableServers.size();\n                    int serverCount = allServers.size();\n                    if (upCount != 0 && serverCount != 0) {\n                        int nextServerIndex = this.incrementAndGetModulo(serverCount);//轮询的核心\n                        server = (Server)allServers.get(nextServerIndex);//得到下标以后返回服务\n                        if (server == null) {\n                            Thread.yield();\n                        } else {\n                            if (server.isAlive() && server.isReadyToServe()) {\n                                return server;\n                            }\n\n                            server = null;\n                        }\n                        continue;\n                    }\n\n                    log.warn("No up servers available from load balancer: " + lb);\n                    return null;\n                }\n\n                if (count >= 10) {\n                    log.warn("No available alive servers after 10 tries from load balancer: " + lb);\n                }\n\n                return server;\n            }\n        }\n    }\n\n\t//轮询的核心\n    private int incrementAndGetModulo(int modulo) {\n        int current;\n        int next;\n        do {\n            current = this.nextServerCyclicCounter.get();//获取当前请求的次数\n            next = (current + 1) % modulo; //取余获得当前下标\n        } while(!this.nextServerCyclicCounter.compareAndSet(current, next)); //CAS选择与替换，当前值与原来的值是否一致，不一致则自旋获取；\n\n        return next;\n    }\n\n    public Server choose(Object key) {\n        return this.choose(this.getLoadBalancer(), key);\n    }\n\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n    }\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br")])]),a("h2",{attrs:{id:"_9-手写自定义负载均衡算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-手写自定义负载均衡算法"}},[n._v("#")]),n._v(" 9.手写自定义负载均衡算法")]),n._v(" "),a("ol",[a("li",[a("p",[n._v("关闭@LoadBalanced注解，使用自定义的负载均衡算法")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("@Configuration\npublic class ApplicationContextConfig\n{\n    @Bean\n//    @LoadBalanced//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力\n    public RestTemplate getRestTemplate()\n    {\n        return new RestTemplate();\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])])]),n._v(" "),a("li",[a("p",[n._v("自定义负载均衡接口")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("package com.wcy.springcloud.lb;\n\nimport org.springframework.cloud.client.ServiceInstance;\n\nimport java.util.List;\n\n/**\n * 自定义负载均衡接口，返回后端实例\n */\npublic interface IMyLoadBalancer {\n    public ServiceInstance getInstace(List<ServiceInstance> serviceInstanceList);\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])])]),n._v(" "),a("li",[a("p",[n._v("实现")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package com.wcy.springcloud.lb.impl;\n\nimport com.wcy.springcloud.lb.IMyLoadBalancer;\nimport org.springframework.cloud.client.ServiceInstance;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * 负载均衡算法：\n * 轮询参考 RoundRobinRule类\n */\n@Component\npublic class MyLoadBalancer implements IMyLoadBalancer {\n\n    AtomicInteger atomicInteger=new AtomicInteger(0);//请求次数\n\n    /**\n     * 获取下次的请求次数\n     * @return\n     */\n    public final int getCountAndIncr(){\n        int current,next;\n        do {\n            current=this.atomicInteger.get();//获取当前的请求次数\n            next=(current >= Integer.MAX_VALUE )?0:current+1; //注意这里不是current++\n        }while (!this.atomicInteger.compareAndSet(current,next));\n        System.out.println("当前请求次数："+next);\n        return next;\n    }\n\n\n    @Override\n    public ServiceInstance getInstace(List<ServiceInstance> serviceInstanceList) {\n        int count = this.getCountAndIncr();//得到请求次数\n        int index = count % serviceInstanceList.size();//取余获得后端服务小标 再get获取到服务\n        return serviceInstanceList.get(index);\n    }\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br")])])]),n._v(" "),a("li",[a("p",[n._v("客户端调用")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    @GetMapping("/consumer/payment/port")\n    public String getPort(){\n    \t//通过后端服务名获取到所有服务器\n        List<ServiceInstance> instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");\n        ServiceInstance instace = myLoadBalancer.getInstace(instances);//获取当前轮询服务\n        URI uri = instace.getUri();\n        return restTemplate.getForObject(uri + "/payment/port", String.class);\n    }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])])])])])}),[],!1,null,null,null);s.default=t.exports}}]);