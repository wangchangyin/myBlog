(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{504:function(s,a,n){"use strict";n.r(a);var t=n(8),i=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"排序-快速排序-quick-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序-快速排序-quick-sort"}},[s._v("#")]),s._v(" 排序 - 快速排序(Quick Sort)")]),s._v(" "),n("blockquote",[n("p",[s._v("快速排序(Quick Sort)使用分治法算法思想。")])]),s._v(" "),n("h2",{attrs:{id:"快速排序介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序介绍"}},[s._v("#")]),s._v(" 快速排序介绍")]),s._v(" "),n("p",[s._v("它的基本思想是: 选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。")]),s._v(" "),n("h2",{attrs:{id:"快速排序实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序实现"}},[s._v("#")]),s._v(" 快速排序实现")]),s._v(" "),n("ul",[n("li",[s._v("从数列中挑出一个基准值。")]),s._v(" "),n("li",[s._v("将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。")]),s._v(" "),n("li",[s._v('递归地把"基准值前面的子数列"和"基准值后面的子数列"进行排序。')])]),s._v(" "),n("p",[s._v("下面以数列a={30,40,60,10,20,50}为例，演示它的快速排序过程(如下图)。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/alg-sort-fast-1.jpg",alt:"img"}})]),s._v(" "),n("p",[s._v("上图只是给出了第1趟快速排序的流程。在第1趟中，设置x=a[i]，即x=30。")]),s._v(" "),n("ul",[n("li",[s._v('从"右 --\x3e 左"查找小于x的数: 找到满足条件的数a[j]=20，此时j=4；然后将a[j]赋值a[i]，此时i=0；接着从左往右遍历。')]),s._v(" "),n("li",[s._v('从"左 --\x3e 右"查找大于x的数: 找到满足条件的数a[i]=40，此时i=1；然后将a[i]赋值a[j]，此时j=4；接着从右往左遍历。')]),s._v(" "),n("li",[s._v('从"右 --\x3e 左"查找小于x的数: 找到满足条件的数a[j]=10，此时j=3；然后将a[j]赋值a[i]，此时i=1；接着从左往右遍历。')]),s._v(" "),n("li",[s._v('从"左 --\x3e 右"查找大于x的数: 找到满足条件的数a[i]=60，此时i=2；然后将a[i]赋值a[j]，此时j=3；接着从右往左遍历。')]),s._v(" "),n("li",[s._v('从"右 --\x3e 左"查找小于x的数: 没有找到满足条件的数。当i>=j时，停止查找；然后将x赋值给a[i]。此趟遍历结束！')])]),s._v(" "),n("p",[s._v("按照同样的方法，对子数列进行递归遍历。最后得到有序数组！")]),s._v(" "),n("h2",{attrs:{id:"快速排序时间复杂度和稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序时间复杂度和稳定性"}},[s._v("#")]),s._v(" 快速排序时间复杂度和稳定性")]),s._v(" "),n("h3",{attrs:{id:"快速排序稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序稳定性"}},[s._v("#")]),s._v(" 快速排序稳定性")]),s._v(" "),n("p",[s._v("快速排序是不稳定的算法，它不满足稳定算法的定义。")]),s._v(" "),n("p",[n("code",[s._v("算法稳定性")]),s._v(" -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！")]),s._v(" "),n("h3",{attrs:{id:"快速排序时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序时间复杂度"}},[s._v("#")]),s._v(" 快速排序时间复杂度")]),s._v(" "),n("blockquote",[n("p",[s._v("快速排序的时间复杂度在最坏情况下是O(N2)，平均的时间复杂度是O(N*lgN)。")])]),s._v(" "),n("p",[s._v("这句话很好理解: 假设被排序的数列中有N个数。遍历一次的时间复杂度是O(N)，需要遍历多少次呢? 至少lg(N+1)次，最多N次。")]),s._v(" "),n("ul",[n("li",[s._v("为什么最少是lg(N+1)次? 快速排序是采用的分治法进行遍历的，我们将它看作一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据完全二叉树的定义，它的深度至少是lg(N+1)。因此，快速排序的遍历次数最少是lg(N+1)次。")]),s._v(" "),n("li",[s._v("为什么最多是N次? 这个应该非常简单，还是将快速排序看作一棵二叉树，它的深度最大是N。因此，快读排序的遍历次数最多是N次。")])]),s._v(" "),n("h2",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 快速排序: Java\n *\n * @author skywang\n * @date 2014/03/11\n */\n\npublic class QuickSort {\n\n    /*\n     * 快速排序\n     *\n     * 参数说明: \n     *     a -- 待排序的数组\n     *     l -- 数组的左边界(例如，从起始位置开始排序，则l=0)\n     *     r -- 数组的右边界(例如，排序截至到数组末尾，则r=a.length-1)\n     */\n    public static void quickSort(int[] a, int l, int r) {\n\n        if (l < r) {\n            int i,j,x;\n\n            i = l;\n            j = r;\n            x = a[i];\n            while (i < j) {\n                while(i < j && a[j] > x)\n                    j--; // 从右向左找第一个小于x的数\n                if(i < j)\n                    a[i++] = a[j];\n                while(i < j && a[i] < x)\n                    i++; // 从左向右找第一个大于x的数\n                if(i < j)\n                    a[j--] = a[i];\n            }\n            a[i] = x;\n            quickSort(a, l, i-1); /* 递归调用 */\n            quickSort(a, i+1, r); /* 递归调用 */\n        }\n    }\n\n    public static void main(String[] args) {\n        int i;\n        int a[] = {30,40,60,10,20,50};\n\n        System.out.printf("before sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n\n        quickSort(a, 0, a.length-1);\n\n        System.out.printf("after  sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n    }\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br")])]),n("h2",{attrs:{id:"个人实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#个人实现"}},[s._v("#")]),s._v(" 个人实现")]),s._v(" "),n("p",[n("strong",[s._v("原理：")])]),s._v(" "),n("p",[s._v("随机选取一个基数，头部指针和尾部指针，先从右边开始，若比基数的数大，则下标左移；左边同理，若比基数小，则右移；双方交换顺序，递归。")]),s._v(" "),n("p",[n("strong",[s._v("效率：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("平均时间复杂度：NlogN（logN表示匹配一次的时间）")])]),s._v(" "),n("li",[n("p",[s._v("最坏时间复杂度：NlogN（匹配了N次)")])]),s._v(" "),n("li",[n("p",[s._v("最好时间复杂度：logN（只匹配一次就已经排序）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public void quickSort(int a[],int left,int right){\n    //结束递归\n    if(left > right){\n        return;\n    }\n    int i=left,j=right,key=a[i];//基数默认取第一个\n    while (i<j){\n        //先从右边开始 找到比基数小的数\n        while (a[j] >= key && i<j){\n            j--;\n        }\n        //左边 找出比基数大的数\n        while (a[i] <= key && i<j){\n            i++;\n        }\n        if(i<j){\n            //不用中间变量交换顺序\n            a[i]=a[i]^a[j];\n            a[j]=a[i]^a[j];\n            a[i]=a[i]^a[j];\n        }\n    }\n\n    //基数和第一个位置交换顺序\n    a[left]=a[i];//第一个位置为现在中间的数\n    a[i]=key;//中间的数为基数\n    \n    quickSort(a,left,i-1);\n    quickSort(a,i+1,right);\n\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])])])]),s._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),n("ul",[n("li",[s._v("https://www.pdai.tech/md/algorithm/alg-sort-x-fast.html")])])])}),[],!1,null,null,null);a.default=i.exports}}]);