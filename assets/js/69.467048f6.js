(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{511:function(s,n,a){"use strict";a.r(n);var e=a(8),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"计数排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计数排序"}},[s._v("#")]),s._v(" 计数排序")]),s._v(" "),a("blockquote",[a("p",[s._v("基数排序(Radix Sort)是桶排序的扩展。")])]),s._v(" "),a("h3",{attrs:{id:"计数排序实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计数排序实现"}},[s._v("#")]),s._v(" 计数排序实现")]),s._v(" "),a("p",[s._v("假设数组：{1、2、3、5、0、2、2、4、5、9}")]),s._v(" "),a("p",[s._v("通过之前的桶排序的方式，该数组在桶中的位置，下标表示实际的值，value代表个数")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f74616e343564752f70686f746f626564406d61737465722f2545352542452541452545342542462541312545362538382541412545352539422542455f32303231303332383133313232362e337834326873726e6e6138302e706e67",alt:"img"}})]),s._v(" "),a("ul",[a("li",[s._v("统计次数数组：下标0表示值为0的有一个，下标5表示值为5的有两个；")]),s._v(" "),a("li",[s._v("前缀和数组presum ：下标1表示值<=1的数有两个，下标为6表示值为<=6的数有九个；其实presum 下标表示值，数组value代表应该在有序数组的位置。")])]),s._v(" "),a("blockquote",[a("p",[s._v("因为我们是通过统计次数的数组得到了前缀和数组，那么我们来分析一下 presum 数组里面值的含义。")]),s._v(" "),a("p",[s._v("例如我们的 presum[2] = 5 ,代表的则是原数组小于等于 2 的值共有 5 个。presum[4] = 7 代表小于等于 4 的元素共有 7 个。")]),s._v(" "),a("p",[s._v("是不是感觉计数排序的含义要慢慢显现出来啦。")]),s._v(" "),a("p",[s._v("其实到这里我们已经可以理解的差不多了，还差最后一步，")]),s._v(" "),a("p",[s._v("此时我们要从后往前遍历原始数组，然后将遍历到的元素放到临时数组的合适位置，并修改 presum 数组的值，遍历结束后则达到了排序的目的。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/20211015171231.png",alt:"微信截图_20210328132549"}})]),s._v(" "),a("p",[s._v("我们从后往前遍历，nums[9] = 9,则我们拿该值去 presum 数组中查找，发现 presum[nums[9]] = presum[9] = 10 ，大家还记得我们 presum 数组里面每个值得含义不，我们此时 presum[9] = 10,则代表在数组中，小于等于的数共有 10 个，则我们要将他排在临时数组的第 10 个位置，也就是 temp[9] = 9。")]),s._v(" "),a("p",[s._v("我们还需要干什么呢？我们想一下，我们已经把 9 放入到 temp 数组里了，已经对其排好序了，那么我们的 presum 数组则不应该再统计他了，则将相应的位置减 1 即可，也就是 presum[9] = 10 - 1 = 9;")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/20211015172005.png",alt:"image-20211015171901132"}})]),s._v(" "),a("p",[s._v("下面我们继续遍历 5 ，然后同样执行上诉步骤")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/20211015172023.png",alt:"img"}})]),s._v(" "),a("p",[s._v("我们继续查询 presum 数组，发现 presum[5] = 9,则说明小于等于 5 的数共有 9 个，我们将其放入到 temp 数组的第 9 个位置，也就是")]),s._v(" "),a("p",[s._v("temp[8] = 5。然后再将 presum[5] 减 1 。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/20211015172036.png",alt:"img"}})]),s._v(" "),a("p",[s._v("是不是到这里就理解了计数排序的大致思路啦。")]),s._v(" "),a("p",[s._v("这个排序的过程像不像查字典呢？通过查询 presum 数组，得出自己应该排在临时数组的第几位。然后再修改下字典，直到遍历结束。")]),s._v(" "),a("p",[s._v("那么我们先来用动画模拟一下我们这个 bug 版的计数排序，加深理解。")]),s._v(" "),a("p",[s._v("注：我们得到 presum 数组的过程在动画中省略。直接模拟排序过程。")]),s._v(" "),a("h4",{attrs:{id:"解决空间问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决空间问题"}},[s._v("#")]),s._v(" 解决空间问题")]),s._v(" "),a("p",[s._v("但是到现在就完了吗？显然没有，我们思考下这个情况。")]),s._v(" "),a("p",[s._v("假如我们的数字为 90，93，94，91，92 如果我们根据上面方法设置 presum 数组的长度，那我们则需要设置数组长度为 95（因为最大值是 94），这样显然是不合理的，会浪费掉很多空间。")]),s._v(" "),a("p",[s._v("还有就是当我们需要对负数进行排序时同样会出现问题，因为我们求次数的时候是根据 nums[index] 的值来填充 presum 数组的，所以当 nums[index] 为负数时，填充 presum 数组时则会报错。而且此时通过最大值来定义数组长度也不合理。")]),s._v(" "),a("p",[s._v("所以我们需要采取别的方法来定义数组长度。")]),s._v(" "),a("p",[s._v("下面我们来说一下偏移量的概念。")]),s._v(" "),a("p",[s._v("例如 90，93，94，91，92，我们 可以通过 max ，min 的值来设置数组长度即 94 - 90 + 1 = 5 。偏移量则为 min 值，也就是 90。")]),s._v(" "),a("p",[s._v("见下图。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/20211015172117.png",alt:"img"}})]),s._v(" "),a("h4",{attrs:{id:"解决负数排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决负数排序"}},[s._v("#")]),s._v(" 解决负数排序")]),s._v(" "),a("p",[s._v("这样我们填充 presum 数组时就不会出现浪费空间的情况了，负数？出现负数的情况当然也可以。继续看")]),s._v(" "),a("p",[s._v("例如：-1，-3，0，2，1")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/wcy_dch/images/raw/master/img/20211015172142.png",alt:"img"}})]),s._v(" "),a("h3",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    /**\n     * 计数排序\n     * @param nums\n     * @return\n     */\n    public static int[] radixSort(int[] nums){\n        int len = nums.length;\n        if (nums.length < 1) {\n            return nums;\n        }\n        //1.求出最大最小值\n        int max = nums[0];\n        int min = nums[0];\n        for (int x : nums) {\n            if (max < x)  max = x;\n            if (min > x)  min = x;\n        }\n        //2.统计次数数组\n        int[] presum=new int[max-min+1];\n        for (int x : nums) {\n            presum[x-min]++;\n        }\n        //3.得出presum 数组长度  该值为前一个数加上自己的数\n        for (int i = 1; i < presum.length; ++i) {\n            presum[i] = presum[i-1]+presum[i];\n        }\n        //临时数组\n        int[] temp = new int[len];\n        //4.遍历数组，开始排序,注意偏移量\n        for (int i = len-1; i >= 0; --i) {//从最后开始编辑\n            //查找 presum 字典，然后将其放到临时数组，注意偏移度\n            int index = presum[nums[i]-min]-1;\n            temp[index] = nums[i];\n            //相应位置减一\n            presum[nums[i]-min]--;\n        }\n        //copy回原数组\n        System.arraycopy(temp,0,nums,0,len);\n        return nums;\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);